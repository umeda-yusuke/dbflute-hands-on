2025-03-11 16:26:10,311 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-03-11 16:26:10,312 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-03-11 16:26:10,312 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-03-11 16:26:10,313 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-03-11 16:26:10,314 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-03-11 16:26:10,314 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-03-11 16:26:11,932 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 16:26:11,933 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 16:26:11,933 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 16:26:11,933 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 16:26:11,939 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-03-11 16:26:12,203 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-03-11 16:26:12,203 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-03-11 16:26:12,208 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-03-11 16:26:12,208 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-03-11 16:26:12,208 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-03-11 16:26:12,208 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-03-11 16:26:12,208 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-03-11 16:26:12,208 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-03-11 16:26:12,213 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-11 16:26:12,213 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 16:26:12,213 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-11 16:26:12,231 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-03-11 16:26:12,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-03-11 16:26:12,241 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-03-11 16:26:12,247 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-03-11 16:26:12,253 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-03-11 16:26:12,261 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-03-11 16:26:12,272 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2025-03-11 16:26:12,286 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-03-11 16:26:12,289 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-03-11 16:26:12,294 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-03-11 16:26:12,298 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-03-11 16:26:12,305 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-03-11 16:26:12,310 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-03-11 16:26:12,314 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-03-11 16:26:12,320 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-03-11 16:26:12,323 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-03-11 16:26:12,329 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-03-11 16:26:12,335 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-03-11 16:26:12,342 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-03-11 16:26:12,347 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-03-11 16:26:12,353 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-03-11 16:26:12,359 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-03-11 16:26:12,366 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member
2025-03-11 16:26:12,370 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-03-11 16:26:12,372 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-03-11 16:26:12,374 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-03-11 16:26:12,377 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-03-11 16:26:12,379 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-03-11 16:26:12,381 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-03-11 16:26:12,384 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-03-11 16:26:12,387 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-03-11 16:26:12,390 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-03-11 16:26:12,392 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-03-11 16:26:12,395 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-03-11 16:26:12,398 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-03-11 16:26:12,400 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-03-11 16:26:12,402 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-03-11 16:26:12,417 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-03-11 16:26:12,417 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-03-11 16:26:12,417 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-03-11 16:26:12,417 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-03-11 16:26:12,417 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-03-11 16:26:12,417 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-03-11 16:26:12,418 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-03-11 16:26:12,420 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-03-11 16:26:12,420 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-03-11 16:26:12,420 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-03-11 16:26:12,434 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-03-11 16:26:12,435 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-03-11 16:26:12,435 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-03-11 16:26:12,435 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-03-11 16:26:12,439 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-03-11 16:26:12,439 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-03-11 16:26:12,439 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-03-11 16:26:12,440 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-03-11 16:26:12,441 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-03-11 16:26:12,442 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-03-11 16:26:12,442 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-03-11 16:26:12,442 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-03-11 16:26:12,443 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-03-11 16:26:12,443 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-03-11 16:26:12,445 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-03-11 16:26:12,451 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-03-11 16:26:12,456 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-03-11 16:26:12,460 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-03-11 16:26:12,464 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-03-11 16:26:12,468 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-03-11 16:26:12,472 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-03-11 16:26:12,477 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-03-11 16:26:12,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-03-11 16:26:12,485 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-03-11 16:26:12,488 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-03-11 16:26:12,491 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-03-11 16:26:12,493 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-03-11 16:26:12,497 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-03-11 16:26:12,501 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-03-11 16:26:12,504 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-03-11 16:26:12,514 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-11 16:26:12,524 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-03-11 16:26:12,535 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-03-11 16:26:12,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-11 16:26:12,556 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-11 16:26:12,566 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-03-11 16:26:12,577 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-11 16:26:12,586 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-11 16:26:12,595 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-03-11 16:26:12,606 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-11 16:26:12,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-03-11 16:26:12,629 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-03-11 16:26:12,638 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-03-11 16:26:12,651 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-03-11 16:26:12,665 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-03-11 16:26:12,674 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-03-11 16:26:12,687 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-03-11 16:26:12,699 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-03-11 16:26:12,703 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-03-11 16:26:12,707 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-03-11 16:26:12,714 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-03-11 16:26:12,720 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-03-11 16:26:12,727 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-03-11 16:26:12,731 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-03-11 16:26:12,738 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-03-11 16:26:12,738 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema.sql
2025-03-11 16:26:12,739 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-03-11 16:26:12,739 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 3 files)
2025-03-11 16:26:12,739 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-03-11 16:26:12,754 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-03-11 16:26:12,754 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-03-11 16:26:12,754 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-03-11 16:26:12,754 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-03-11 16:26:12,754 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-03-11 16:26:12,754 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-03-11 16:26:12,761 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-03-11 16:26:12,762 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/common/xls/10-master.xls)
2025-03-11 16:26:12,762 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-03-11 16:26:12,835 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-11 16:26:12,835 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 16:26:12,835 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-11 16:26:12,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-03-11 16:26:12,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-03-11 16:26:12,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-03-11 16:26:12,860 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-03-11 16:26:12,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-03-11 16:26:12,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-03-11 16:26:12,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-03-11 16:26:12,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-03-11 16:26:12,863 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-03-11 16:26:12,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2025-03-11 16:26:12,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2025-03-11 16:26:12,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2025-03-11 16:26:12,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2025-03-11 16:26:12,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2025-03-11 16:26:12,866 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-03-11 16:26:12,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-03-11 16:26:12,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-03-11 16:26:12,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-03-11 16:26:12,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-03-11 16:26:12,869 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-03-11 16:26:12,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-03-11 16:26:12,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-03-11 16:26:12,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-03-11 16:26:12,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-03-11 16:26:12,869 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-03-11 16:26:12,871 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-03-11 16:26:12,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-03-11 16:26:12,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-03-11 16:26:12,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-03-11 16:26:12,873 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-03-11 16:26:12,875 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-03-11 16:26:12,875 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/ut/xls/20-member.xls)
2025-03-11 16:26:12,875 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-03-11 16:26:12,895 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2025-03-11 16:26:12.895, foo, 2025-03-11 16:26:12.895, foo, 0}
2025-03-11 16:26:12,899 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2025-03-11 16:26:12.899, foo, 2025-03-11 16:26:12.899, foo, 0}
2025-03-11 16:26:12,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2025-03-11 16:26:12.9, foo, 2025-03-11 16:26:12.9, foo, 0}
2025-03-11 16:26:12,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2025-03-11 16:26:12.9, foo, 2025-03-11 16:26:12.9, foo, 0}
2025-03-11 16:26:12,900 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2025-03-11 16:26:12.9, foo, 2025-03-11 16:26:12.9, foo, 0}
2025-03-11 16:26:12,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2025-03-11 16:26:12.901, foo, 2025-03-11 16:26:12.901, foo, 0}
2025-03-11 16:26:12,901 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2025-03-11 16:26:12.901, foo, 2025-03-11 16:26:12.901, foo, 0}
2025-03-11 16:26:12,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2025-03-11 16:26:12.902, foo, 2025-03-11 16:26:12.902, foo, 0}
2025-03-11 16:26:12,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2025-03-11 16:26:12.902, foo, 2025-03-11 16:26:12.902, foo, 0}
2025-03-11 16:26:12,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2025-03-11 16:26:12.902, foo, 2025-03-11 16:26:12.902, foo, 0}
2025-03-11 16:26:12,902 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2025-03-11 16:26:12.902, foo, 2025-03-11 16:26:12.902, foo, 0}
2025-03-11 16:26:12,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2025-03-11 16:26:12.903, foo, 2025-03-11 16:26:12.903, foo, 0}
2025-03-11 16:26:12,903 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2025-03-11 16:26:12.903, foo, 2025-03-11 16:26:12.903, foo, 0}
2025-03-11 16:26:12,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2025-03-11 16:26:12.904, foo, 2025-03-11 16:26:12.904, foo, 0}
2025-03-11 16:26:12,904 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2025-03-11 16:26:12.904, foo, 2025-03-11 16:26:12.904, foo, 0}
2025-03-11 16:26:12,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2025-03-11 16:26:12.905, foo, 2025-03-11 16:26:12.905, foo, 0}
2025-03-11 16:26:12,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2025-03-11 16:26:12.905, foo, 2025-03-11 16:26:12.905, foo, 0}
2025-03-11 16:26:12,905 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2025-03-11 16:26:12.905, foo, 2025-03-11 16:26:12.905, foo, 0}
2025-03-11 16:26:12,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2025-03-11 16:26:12.905, foo, 2025-03-11 16:26:12.905, foo, 0}
2025-03-11 16:26:12,906 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2025-03-11 16:26:12.906, foo, 2025-03-11 16:26:12.906, foo, 0}
2025-03-11 16:26:12,911 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER
2025-03-11 16:26:12,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2025-03-11 16:26:12.912, foo, 2025-03-11 16:26:12.912, foo, 0}
2025-03-11 16:26:12,912 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2025-03-11 16:26:12.912, foo, 2025-03-11 16:26:12.912, foo, 0}
2025-03-11 16:26:12,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2025-03-11 16:26:12.913, foo, 2025-03-11 16:26:12.913, foo, 0}
2025-03-11 16:26:12,913 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2025-03-11 16:26:12.913, foo, 2025-03-11 16:26:12.913, foo, 0}
2025-03-11 16:26:12,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2025-03-11 16:26:12.914, foo, 2025-03-11 16:26:12.914, foo, 0}
2025-03-11 16:26:12,914 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2025-03-11 16:26:12.914, foo, 2025-03-11 16:26:12.914, foo, 0}
2025-03-11 16:26:12,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2025-03-11 16:26:12.915, foo, 2025-03-11 16:26:12.915, foo, 0}
2025-03-11 16:26:12,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2025-03-11 16:26:12.915, foo, 2025-03-11 16:26:12.915, foo, 0}
2025-03-11 16:26:12,915 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2025-03-11 16:26:12.915, foo, 2025-03-11 16:26:12.915, foo, 0}
2025-03-11 16:26:12,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2025-03-11 16:26:12.916, foo, 2025-03-11 16:26:12.916, foo, 0}
2025-03-11 16:26:12,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2025-03-11 16:26:12.916, foo, 2025-03-11 16:26:12.916, foo, 0}
2025-03-11 16:26:12,916 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2025-03-11 16:26:12.916, foo, 2025-03-11 16:26:12.916, foo, 0}
2025-03-11 16:26:12,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2025-03-11 16:26:12.917, foo, 2025-03-11 16:26:12.917, foo, 0}
2025-03-11 16:26:12,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2025-03-11 16:26:12.917, foo, 2025-03-11 16:26:12.917, foo, 0}
2025-03-11 16:26:12,917 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2025-03-11 16:26:12.917, foo, 2025-03-11 16:26:12.917, foo, 0}
2025-03-11 16:26:12,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2025-03-11 16:26:12.918, foo, 2025-03-11 16:26:12.918, foo, 0}
2025-03-11 16:26:12,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2025-03-11 16:26:12.918, foo, 2025-03-11 16:26:12.918, foo, 0}
2025-03-11 16:26:12,918 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2025-03-11 16:26:12.918, foo, 2025-03-11 16:26:12.918, foo, 0}
2025-03-11 16:26:12,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2025-03-11 16:26:12.919, foo, 2025-03-11 16:26:12.919, foo, 0}
2025-03-11 16:26:12,919 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2025-03-11 16:26:12.919, foo, 2025-03-11 16:26:12.919, foo, 0}
2025-03-11 16:26:12,923 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_ADDRESS
2025-03-11 16:26:12,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2025-03-11 16:26:12,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2025-03-11 16:26:12,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2025-03-11 16:26:12,924 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2025-03-11 16:26:12,925 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2025-03-11 16:26:12,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2025-03-11 16:26:12,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2025-03-11 16:26:12,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2025-03-11 16:26:12,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2025-03-11 16:26:12,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2025-03-11 16:26:12,926 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2025-03-11 16:26:12,927 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2025-03-11 16:26:12,928 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2025-03-11 16:26:12,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2025-03-11 16:26:12,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2025-03-11 16:26:12,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2025-03-11 16:26:12,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2025-03-11 16:26:12,929 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2025-03-11 16:26:12,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2025-03-11 16:26:12,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2025-03-11 16:26:12,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2025-03-11 16:26:12,930 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2025-03-11 16:26:12,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2025-03-11 16:26:12,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2025-03-11 16:26:12,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2025-03-11 16:26:12,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2025-03-11 16:26:12,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2025-03-11 16:26:12,931 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2025-03-11 16:26:12,932 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2025-03-11 16:26:12,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2025-03-11 16:26:12,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2025-03-11 16:26:12,933 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2025-03-11 16:26:12,942 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 56 rows are loaded to MEMBER_LOGIN
2025-03-11 16:26:12,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2025-03-11 16:26:12.943, foo, 2025-03-11 16:26:12.943, foo, 0}
2025-03-11 16:26:12,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2025-03-11 16:26:12.943, foo, 2025-03-11 16:26:12.943, foo, 0}
2025-03-11 16:26:12,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2025-03-11 16:26:12.943, foo, 2025-03-11 16:26:12.943, foo, 0}
2025-03-11 16:26:12,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2025-03-11 16:26:12.943, foo, 2025-03-11 16:26:12.943, foo, 0}
2025-03-11 16:26:12,943 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2025-03-11 16:26:12.943, foo, 2025-03-11 16:26:12.943, foo, 0}
2025-03-11 16:26:12,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2025-03-11 16:26:12.943, foo, 2025-03-11 16:26:12.944, foo, 0}
2025-03-11 16:26:12,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2025-03-11 16:26:12.944, foo, 2025-03-11 16:26:12.944, foo, 0}
2025-03-11 16:26:12,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2025-03-11 16:26:12.944, foo, 2025-03-11 16:26:12.944, foo, 0}
2025-03-11 16:26:12,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2025-03-11 16:26:12.944, foo, 2025-03-11 16:26:12.944, foo, 0}
2025-03-11 16:26:12,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2025-03-11 16:26:12.944, foo, 2025-03-11 16:26:12.944, foo, 0}
2025-03-11 16:26:12,944 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2025-03-11 16:26:12.944, foo, 2025-03-11 16:26:12.944, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,945 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2025-03-11 16:26:12.945, foo, 2025-03-11 16:26:12.945, foo, 0}
2025-03-11 16:26:12,946 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2025-03-11 16:26:12.946, foo, 2025-03-11 16:26:12.946, foo, 0}
2025-03-11 16:26:12,950 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SECURITY
2025-03-11 16:26:12,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{1, 1234, PLT, 2025-03-11 16:26:12.95, foo, 2025-03-11 16:26:12.95, foo, 0}
2025-03-11 16:26:12,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{2, 2345, GLD, 2025-03-11 16:26:12.95, foo, 2025-03-11 16:26:12.95, foo, 0}
2025-03-11 16:26:12,950 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{3, 3456, GLD, 2025-03-11 16:26:12.95, foo, 2025-03-11 16:26:12.95, foo, 0}
2025-03-11 16:26:12,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{4, 875, BRZ, 2025-03-11 16:26:12.951, foo, 2025-03-11 16:26:12.951, foo, 0}
2025-03-11 16:26:12,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{5, 1111, BRZ, 2025-03-11 16:26:12.951, foo, 2025-03-11 16:26:12.951, foo, 0}
2025-03-11 16:26:12,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{6, 5422, SIL, 2025-03-11 16:26:12.951, foo, 2025-03-11 16:26:12.951, foo, 0}
2025-03-11 16:26:12,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{7, 24678, SIL, 2025-03-11 16:26:12.951, foo, 2025-03-11 16:26:12.951, foo, 0}
2025-03-11 16:26:12,951 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{8, 234, SIL, 2025-03-11 16:26:12.951, foo, 2025-03-11 16:26:12.951, foo, 0}
2025-03-11 16:26:12,953 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{9, 3, SIL, 2025-03-11 16:26:12.951, foo, 2025-03-11 16:26:12.953, foo, 0}
2025-03-11 16:26:12,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{10, 98765, PLT, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{11, 34, GLD, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{12, 532, PLT, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{13, 23678, GLD, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{14, 432, GLD, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,954 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{15, 543, BRZ, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{16, 23545, PLT, 2025-03-11 16:26:12.954, foo, 2025-03-11 16:26:12.954, foo, 0}
2025-03-11 16:26:12,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{17, 2345, GLD, 2025-03-11 16:26:12.955, foo, 2025-03-11 16:26:12.955, foo, 0}
2025-03-11 16:26:12,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{18, 8763, SIL, 2025-03-11 16:26:12.955, foo, 2025-03-11 16:26:12.955, foo, 0}
2025-03-11 16:26:12,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{19, 34567, SIL, 2025-03-11 16:26:12.955, foo, 2025-03-11 16:26:12.955, foo, 0}
2025-03-11 16:26:12,955 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{20, 43, GLD, 2025-03-11 16:26:12.955, foo, 2025-03-11 16:26:12.955, foo, 0}
2025-03-11 16:26:12,959 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SERVICE
2025-03-11 16:26:12,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2025-03-11 16:26:12.959, foo, 2025-03-11 16:26:12.959, foo}
2025-03-11 16:26:12,959 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2025-03-11 16:26:12.959, foo, 2025-03-11 16:26:12.959, foo}
2025-03-11 16:26:12,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2025-03-11 16:26:12.96, foo, 2025-03-11 16:26:12.96, foo}
2025-03-11 16:26:12,960 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2025-03-11 16:26:12.96, foo, 2025-03-11 16:26:12.96, foo}
2025-03-11 16:26:12,961 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2025-03-11 16:26:12,961 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-03-11 16:26:12,961 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/ut/xls/30-product.xls)
2025-03-11 16:26:12,962 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-03-11 16:26:12,977 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2025-03-11 16:26:12.977, foo, 2025-03-11 16:26:12.977, foo, 0}
2025-03-11 16:26:12,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2025-03-11 16:26:12.978, foo, 2025-03-11 16:26:12.978, foo, 0}
2025-03-11 16:26:12,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2025-03-11 16:26:12.978, foo, 2025-03-11 16:26:12.978, foo, 0}
2025-03-11 16:26:12,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2025-03-11 16:26:12.978, foo, 2025-03-11 16:26:12.978, foo, 0}
2025-03-11 16:26:12,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2025-03-11 16:26:12.978, foo, 2025-03-11 16:26:12.978, foo, 0}
2025-03-11 16:26:12,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2025-03-11 16:26:12.978, foo, 2025-03-11 16:26:12.978, foo, 0}
2025-03-11 16:26:12,978 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2025-03-11 16:26:12.978, foo, 2025-03-11 16:26:12.978, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,979 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2025-03-11 16:26:12.979, foo, 2025-03-11 16:26:12.979, foo, 0}
2025-03-11 16:26:12,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2025-03-11 16:26:12.98, foo, 2025-03-11 16:26:12.98, foo, 0}
2025-03-11 16:26:12,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2025-03-11 16:26:12.98, foo, 2025-03-11 16:26:12.98, foo, 0}
2025-03-11 16:26:12,980 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2025-03-11 16:26:12.98, foo, 2025-03-11 16:26:12.98, foo, 0}
2025-03-11 16:26:12,985 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to PRODUCT
2025-03-11 16:26:12,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2025-03-11 16:26:12.985, foo, 2025-03-11 16:26:12.985, foo, 0}
2025-03-11 16:26:12,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2025-03-11 16:26:12.985, foo, 2025-03-11 16:26:12.985, foo, 0}
2025-03-11 16:26:12,985 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2025-03-11 16:26:12.985, foo, 2025-03-11 16:26:12.985, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,986 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2025-03-11 16:26:12.986, foo, 2025-03-11 16:26:12.986, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,987 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2025-03-11 16:26:12.987, foo, 2025-03-11 16:26:12.987, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,988 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2025-03-11 16:26:12.988, foo, 2025-03-11 16:26:12.988, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,989 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2025-03-11 16:26:12.989, foo, 2025-03-11 16:26:12.989, foo, 0}
2025-03-11 16:26:12,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2025-03-11 16:26:12.99, foo, 2025-03-11 16:26:12.99, foo, 0}
2025-03-11 16:26:12,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2025-03-11 16:26:12.99, foo, 2025-03-11 16:26:12.99, foo, 0}
2025-03-11 16:26:12,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2025-03-11 16:26:12.99, foo, 2025-03-11 16:26:12.99, foo, 0}
2025-03-11 16:26:12,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2025-03-11 16:26:12.99, foo, 2025-03-11 16:26:12.99, foo, 0}
2025-03-11 16:26:12,990 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2025-03-11 16:26:12.99, foo, 2025-03-11 16:26:12.99, foo, 0}
2025-03-11 16:26:12,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2025-03-11 16:26:12.991, foo, 2025-03-11 16:26:12.991, foo, 0}
2025-03-11 16:26:12,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2025-03-11 16:26:12.991, foo, 2025-03-11 16:26:12.991, foo, 0}
2025-03-11 16:26:12,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2025-03-11 16:26:12.991, foo, 2025-03-11 16:26:12.991, foo, 0}
2025-03-11 16:26:12,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2025-03-11 16:26:12.991, foo, 2025-03-11 16:26:12.991, foo, 0}
2025-03-11 16:26:12,991 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2025-03-11 16:26:12.991, foo, 2025-03-11 16:26:12.991, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,992 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2025-03-11 16:26:12.992, foo, 2025-03-11 16:26:12.992, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,993 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2025-03-11 16:26:12.993, foo, 2025-03-11 16:26:12.993, foo, 0}
2025-03-11 16:26:12,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2025-03-11 16:26:12.994, foo, 2025-03-11 16:26:12.994, foo, 0}
2025-03-11 16:26:12,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2025-03-11 16:26:12.994, foo, 2025-03-11 16:26:12.994, foo, 0}
2025-03-11 16:26:12,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2025-03-11 16:26:12.994, foo, 2025-03-11 16:26:12.994, foo, 0}
2025-03-11 16:26:12,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2025-03-11 16:26:12.994, foo, 2025-03-11 16:26:12.994, foo, 0}
2025-03-11 16:26:12,994 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2025-03-11 16:26:12.994, foo, 2025-03-11 16:26:12.994, foo, 0}
2025-03-11 16:26:12,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2025-03-11 16:26:12.995, foo, 2025-03-11 16:26:12.995, foo, 0}
2025-03-11 16:26:12,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2025-03-11 16:26:12.995, foo, 2025-03-11 16:26:12.995, foo, 0}
2025-03-11 16:26:12,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2025-03-11 16:26:12.995, foo, 2025-03-11 16:26:12.995, foo, 0}
2025-03-11 16:26:12,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2025-03-11 16:26:12.995, foo, 2025-03-11 16:26:12.995, foo, 0}
2025-03-11 16:26:12,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2025-03-11 16:26:12.995, foo, 2025-03-11 16:26:12.995, foo, 0}
2025-03-11 16:26:12,995 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2025-03-11 16:26:12.995, foo, 2025-03-11 16:26:12.995, foo, 0}
2025-03-11 16:26:12,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2025-03-11 16:26:12.996, foo, 2025-03-11 16:26:12.996, foo, 0}
2025-03-11 16:26:12,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2025-03-11 16:26:12.996, foo, 2025-03-11 16:26:12.996, foo, 0}
2025-03-11 16:26:12,996 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2025-03-11 16:26:12.996, foo, 2025-03-11 16:26:12.996, foo, 0}
2025-03-11 16:26:13,008 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 70 rows are loaded to PURCHASE
2025-03-11 16:26:13,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2025-03-11 16:26:13.009, foo, 2025-03-11 16:26:13.009, foo}
2025-03-11 16:26:13,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2025-03-11 16:26:13.009, foo, 2025-03-11 16:26:13.009, foo}
2025-03-11 16:26:13,009 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2025-03-11 16:26:13.009, foo, 2025-03-11 16:26:13.009, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,010 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2025-03-11 16:26:13.01, foo, 2025-03-11 16:26:13.01, foo}
2025-03-11 16:26:13,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,011 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2025-03-11 16:26:13.011, foo, 2025-03-11 16:26:13.011, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,012 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2025-03-11 16:26:13.012, foo, 2025-03-11 16:26:13.012, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,013 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2025-03-11 16:26:13.013, foo, 2025-03-11 16:26:13.013, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2025-03-11 16:26:13.014, foo, 2025-03-11 16:26:13.014, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2025-03-11 16:26:13.014, foo, 2025-03-11 16:26:13.014, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2025-03-11 16:26:13.014, foo, 2025-03-11 16:26:13.014, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2025-03-11 16:26:13.014, foo, 2025-03-11 16:26:13.014, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2025-03-11 16:26:13.014, foo, 2025-03-11 16:26:13.014, foo}
2025-03-11 16:26:13,014 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2025-03-11 16:26:13.014, foo, 2025-03-11 16:26:13.014, foo}
2025-03-11 16:26:13,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2025-03-11 16:26:13.015, foo, 2025-03-11 16:26:13.015, foo}
2025-03-11 16:26:13,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2025-03-11 16:26:13.015, foo, 2025-03-11 16:26:13.015, foo}
2025-03-11 16:26:13,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2025-03-11 16:26:13.015, foo, 2025-03-11 16:26:13.015, foo}
2025-03-11 16:26:13,015 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2025-03-11 16:26:13.015, foo, 2025-03-11 16:26:13.015, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,016 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2025-03-11 16:26:13.016, foo, 2025-03-11 16:26:13.016, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,017 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2025-03-11 16:26:13.017, foo, 2025-03-11 16:26:13.017, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,018 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2025-03-11 16:26:13.018, foo, 2025-03-11 16:26:13.018, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,019 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2025-03-11 16:26:13.019, foo, 2025-03-11 16:26:13.019, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,020 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2025-03-11 16:26:13.02, foo, 2025-03-11 16:26:13.02, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,021 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2025-03-11 16:26:13.021, foo, 2025-03-11 16:26:13.021, foo}
2025-03-11 16:26:13,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2025-03-11 16:26:13.022, foo, 2025-03-11 16:26:13.022, foo}
2025-03-11 16:26:13,022 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2025-03-11 16:26:13.022, foo, 2025-03-11 16:26:13.022, foo}
2025-03-11 16:26:13,037 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2025-03-11 16:26:13,038 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():387) - ...Checking implicit set of classification
2025-03-11 16:26:13,042 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-03-11 16:26:13,042 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-03-11 16:26:13,042 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-03-11 16:26:13,042 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-03-11 16:26:13,042 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-03-11 16:26:13,042 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-03-11 16:26:13,044 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-03-11 16:26:13,045 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-03-11 16:26:13,045 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-03-11 16:26:13,045 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-03-11 16:26:13,046 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s740ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 3 files) - 00m00s533ms
  (Initialize Schema) - 00m00s208ms
  (Create Schema) - 00m00s323ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema.sql

 Load Data: common:{xls=1}, ut:{xls=2} - 00m00s287ms
  <common>
  o 10-master.xls
  <ut>
  o 20-member.xls
  o 30-product.xls

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-03-11 16:26:33,303 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-03-11 16:26:33,304 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-03-11 16:26:33,304 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-03-11 16:26:33,304 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-03-11 16:26:33,304 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-03-11 16:26:33,311 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 16:26:33,312 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 16:26:33,312 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 16:26:33,312 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 16:26:33,325 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-03-11 16:26:33,325 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-03-11 16:26:33,326 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-03-11 16:26:33,329 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:26:33,362 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-03-11 16:26:33,365 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-03-11 16:26:33,588 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-03-11 16:26:33,588 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-03-11 16:26:33,588 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-03-11 16:26:33,589 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-11 16:26:33,589 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 16:26:33,589 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-11 16:26:33,593 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-03-11 16:26:33,595 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-03-11 16:26:33,600 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-03-11 16:26:33,604 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-03-11 16:26:33,604 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-03-11 16:26:33,604 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-03-11 16:26:33,605 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-03-11 16:26:33,621 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-03-11 16:26:33,630 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-03-11 16:26:33,636 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-03-11 16:26:33,642 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-03-11 16:26:33,650 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-03-11 16:26:33,658 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-03-11 16:26:33,666 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-03-11 16:26:33,672 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-03-11 16:26:33,678 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-03-11 16:26:33,683 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-03-11 16:26:33,690 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-03-11 16:26:33,695 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-03-11 16:26:33,700 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-03-11 16:26:33,705 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-03-11 16:26:33,710 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-03-11 16:26:33,710 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-03-11 16:26:33,710 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-03-11 16:26:33,710 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-03-11 16:26:33,710 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-03-11 16:26:33,710 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-03-11 16:26:33,712 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-03-11 16:26:33,712 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-03-11 16:26:33,712 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-03-11 16:26:33,722 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-03-11 16:26:33,722 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:26:33,782 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1585) -  -> same as previous (schema diff)
2025-03-11 16:26:33,782 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-03-11 16:26:33,786 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s484ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-03-11 16:30:14,755 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-03-11 16:30:14,756 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-03-11 16:30:14,756 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-03-11 16:30:14,756 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-03-11 16:30:14,756 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-03-11 16:30:14,764 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 16:30:14,764 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 16:30:14,764 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 16:30:14,764 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 16:30:14,774 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-03-11 16:30:14,774 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-03-11 16:30:14,774 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-03-11 16:30:14,777 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:30:14,812 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-03-11 16:30:14,815 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-03-11 16:30:15,034 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-03-11 16:30:15,034 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-03-11 16:30:15,034 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-03-11 16:30:15,035 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-11 16:30:15,035 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 16:30:15,035 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-11 16:30:15,039 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-03-11 16:30:15,042 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-03-11 16:30:15,046 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-03-11 16:30:15,050 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-03-11 16:30:15,050 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-03-11 16:30:15,050 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-03-11 16:30:15,051 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-03-11 16:30:15,066 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-03-11 16:30:15,074 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-03-11 16:30:15,081 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-03-11 16:30:15,087 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-03-11 16:30:15,094 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-03-11 16:30:15,100 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-03-11 16:30:15,106 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-03-11 16:30:15,112 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-03-11 16:30:15,118 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-03-11 16:30:15,124 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-03-11 16:30:15,131 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-03-11 16:30:15,136 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-03-11 16:30:15,142 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-03-11 16:30:15,147 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-03-11 16:30:15,154 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-03-11 16:30:15,154 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-03-11 16:30:15,154 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-03-11 16:30:15,154 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-03-11 16:30:15,154 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-03-11 16:30:15,155 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-03-11 16:30:15,156 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-03-11 16:30:15,156 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-03-11 16:30:15,156 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-03-11 16:30:15,165 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-03-11 16:30:15,165 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:30:15,204 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1585) -  -> same as previous (schema diff)
2025-03-11 16:30:15,204 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-03-11 16:30:15,208 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s457ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-03-11 16:30:15,420 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-03-11 16:30:15,421 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-03-11 16:30:15,421 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-03-11 16:30:15,421 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-03-11 16:30:15,421 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-03-11 16:30:15,426 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 16:30:15,426 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 16:30:15,427 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 16:30:15,427 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 16:30:15,427 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-03-11 16:30:15,427 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-03-11 16:30:15,427 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-03-11 16:30:15,427 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-03-11 16:30:15,427 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-03-11 16:30:15,427 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-03-11 16:30:15,438 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:30:15,460 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-03-11 16:30:15,460 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-03-11 16:30:15,460 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-03-11 16:30:15,460 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-03-11 16:30:15,460 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-03-11 16:30:15,461 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-03-11 16:30:15,461 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-03-11 16:30:15,461 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-03-11 16:30:15,462 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-03-11 16:30:15,464 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'Doc'.

[Advice]
Check the exception messages and the stack traces.
* * * * * * * * * */
org.dbflute.exception.DfPropFileReadFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to parse the map file.

[Advice]
Make sure your map file format.
For example:
  (x):
    map:{
        ; map:{
            ...
    }
  (o):
    map:{
        ; map:{
            ...
        }
    }

[DfProp Path]
./dfprop/classificationDefinitionMap.dfprop
* * * * * * * * * */
	at org.dbflute.infra.dfprop.DfPropFile.throwDfPropMapStringParseFailureException(DfPropFile.java:177)
	at org.dbflute.infra.dfprop.DfPropFile.actuallyReadMap(DfPropFile.java:126)
	at org.dbflute.infra.dfprop.DfPropFile$1.readMap(DfPropFile.java:114)
	at org.dbflute.infra.dfprop.DfPropFile.callReadingMapChecked(DfPropFile.java:437)
	at org.dbflute.infra.dfprop.DfPropFile.doReadMap(DfPropFile.java:424)
	at org.dbflute.infra.dfprop.DfPropFile.readMap(DfPropFile.java:112)
	at org.dbflute.properties.propreader.DfOutsideMapPropReader.readMap(DfOutsideMapPropReader.java:43)
	at org.dbflute.properties.assistant.base.DfPropertyValueHandler.getOutsideMapProp(DfPropertyValueHandler.java:262)
	at org.dbflute.properties.assistant.base.DfPropertyValueHandler.mapProp(DfPropertyValueHandler.java:229)
	at org.dbflute.properties.DfAbstractDBFluteProperties.mapProp(DfAbstractDBFluteProperties.java:155)
	at org.dbflute.properties.DfClassificationProperties.getClassificationDefinitionMap(DfClassificationProperties.java:135)
	at org.dbflute.properties.DfClassificationProperties.initializeClassificationDefinition(DfClassificationProperties.java:318)
	at org.apache.torque.engine.database.model.Database.initializeClassificationDeployment(Database.java:1064)
	at org.apache.torque.engine.database.model.Database.initializeSupplementaryMetaData(Database.java:1023)
	at org.apache.torque.task.TorqueDocumentationTask.purelyInitializeSchemaHtmlSchemaData(TorqueDocumentationTask.java:442)
	at org.apache.torque.task.TorqueDocumentationTask.processSchemaHtml(TorqueDocumentationTask.java:277)
	at org.apache.torque.task.TorqueDocumentationTask.doExecute(TorqueDocumentationTask.java:235)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:192)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:78)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: org.dbflute.helper.dfmap.exception.DfMapParseFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
The last remainderString as map should be empty string but ...

[Generated Map]
{Flg=[{topComment=フラグを示す, codeType=Number}, {code=1, name=True, alias=はい, comment=有効を示す}, {code=0, name=False, alias=いいえ, comment=無効を示す}, $$ALL$$ = map:{suffix:_FLG=Flg]}

[Remainder String]
map:{
    ; Flg = list:{
            ; map:{topComment=フラグを示す; codeType=Number}
            ; map:{code=1; name=True ; alias=はい  ; comment=有効を示す}
            ; map:{code=0; name=False; alias=いいえ; comment=無効を示す}
            ; $$ALL$$ = map:{suffix:_FLG=Flg}
    }
    ; MemberStatus = list:{
            ; map:{topComment=入会から退会までの会員のステータスを示す; codeType=String}
            ; map:{
                ; table=MEMBER_STATUS
                ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
                ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
            }
    }
    ; ServiceRank = list:{
        ; map:{topComment=会員が受けられるサービスのランクを示す; codeType=String}
        ; map:{
            ; table=SERVICE_RANK
            ; code=SERVICE_RANK_CODE; name=SERVICE_RANK_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
        }
    }
    ; Region = list:{
        ; map:{topComment=主に会員の住んでいる地域を示す; codeType=Number}
        ; map:{
            ; table=REGION
            ; code=REGION_ID; name=REGION_NAME
            ; orderBy=REGION_ID
        }
    }
    ; WithdrawalReason = list:{
        ; map:{topComment=会員の退会理由。なのでちょっとねがてぃぶ; codeType=String}
        ; map:{
            ; table=WITHDRAWAL_REASON
            ; code=WITHDRAWAL_REASON_CODE; name=WITHDRAWAL_REASON_CODE
            ; comment=WITHDRAWAL_REASON_TEXT; orderBy=DISPLAY_ORDER
        }
    }
    ; ProductCategory = list:{
        ; map:{topComment=商品のカテゴリ。階層構造である; codeType=String}
        ; map:{
            ; table=$sql:PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
            ; code=$sql: loc.PRODUCT_CATEGORY_CODE
            ; name=$sql: loc.PRODUCT_CATEGORY_NAME
            ; comment=$sql: 'of ' || rel.PRODUCT_CATEGORY_NAME
            ; orderBy=loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
        }
    }
    ; ProductStatus = list:{
        ; map:{topComment=商品ステータス。あんまり面白みのないステータス; codeType=String}
        ; map:{
            ; table=PRODUCT_STATUS
            ; code=PRODUCT_STATUS_CODE; name=PRODUCT_STATUS_NAME
        }
    }
    ; PaymentMethod = list:{
        ; map:{
            ; topComment=支払方法; codeType=String
            ; isCheckImplicitSet=true
            ; groupingMap = map:{
                ; recommended = map:{
                    ; groupComment = 最も推奨されている方法
                    ; elementList = list:{ByHand}
                }
            }
        }
        ; map:{code=HAN; name=ByHand; alias=手渡し; comment=Face-to-Faceの手渡しで商品と交換}
        ; map:{code=BAK; name=BankTransfer; alias=銀行振込; comment=銀行振込で確認してから商品発送}
        ; map:{code=CRC; name=CreditCard; alias=クレジットカード; comment=クレジットカードの番号を教えてもらう}
    }
    ; PURCHASE_PAYMENT = map:{PAYMENT_METHOD_CODE=PaymentMethod}
}


[Current Remainder Index]
262 (max:2771)

    ; MemberStatus = list:{
 ...

[Defined Control Mark]
map: list: { } ; =
* * * * * * * * * */
	at org.dbflute.helper.dfmap.DfMapStyle.throwDfMapStringUnneededStringFoundException(DfMapStyle.java:1335)
	at org.dbflute.helper.dfmap.DfMapStyle.assertLastRemainderAsMap(DfMapStyle.java:1324)
	at org.dbflute.helper.dfmap.DfMapStyle.fromMapString(DfMapStyle.java:432)
	at org.dbflute.helper.dfmap.DfMapFile.readMap(DfMapFile.java:117)
	at org.dbflute.infra.dfprop.DfPropFile.actuallyReadMap(DfPropFile.java:121)
	... 48 more
2025-03-11 16:30:15,485 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s067ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-03-11 16:31:41,223 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-03-11 16:31:41,224 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-03-11 16:31:41,224 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-03-11 16:31:41,224 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-03-11 16:31:41,225 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-03-11 16:31:41,232 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 16:31:41,232 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 16:31:41,232 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 16:31:41,232 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 16:31:41,242 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-03-11 16:31:41,243 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-03-11 16:31:41,243 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-03-11 16:31:41,246 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:31:41,281 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-03-11 16:31:41,283 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-03-11 16:31:41,500 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-03-11 16:31:41,500 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-03-11 16:31:41,501 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-03-11 16:31:41,501 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-11 16:31:41,501 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 16:31:41,501 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-11 16:31:41,506 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-03-11 16:31:41,509 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-03-11 16:31:41,513 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-03-11 16:31:41,517 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-03-11 16:31:41,517 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-03-11 16:31:41,517 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-03-11 16:31:41,517 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-03-11 16:31:41,533 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-03-11 16:31:41,540 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-03-11 16:31:41,547 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-03-11 16:31:41,554 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-03-11 16:31:41,561 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-03-11 16:31:41,567 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-03-11 16:31:41,573 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-03-11 16:31:41,579 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-03-11 16:31:41,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-03-11 16:31:41,591 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-03-11 16:31:41,597 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-03-11 16:31:41,603 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-03-11 16:31:41,609 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-03-11 16:31:41,614 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-03-11 16:31:41,619 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-03-11 16:31:41,619 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-03-11 16:31:41,619 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-03-11 16:31:41,620 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-03-11 16:31:41,620 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-03-11 16:31:41,620 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-03-11 16:31:41,621 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-03-11 16:31:41,621 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-03-11 16:31:41,621 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-03-11 16:31:41,630 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-03-11 16:31:41,631 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:31:41,670 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1585) -  -> same as previous (schema diff)
2025-03-11 16:31:41,670 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-03-11 16:31:41,673 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s453ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-03-11 16:31:41,878 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-03-11 16:31:41,878 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-03-11 16:31:41,878 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-03-11 16:31:41,878 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-03-11 16:31:41,878 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-03-11 16:31:41,884 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 16:31:41,884 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 16:31:41,884 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 16:31:41,885 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 16:31:41,885 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-03-11 16:31:41,885 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-03-11 16:31:41,885 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-03-11 16:31:41,885 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-03-11 16:31:41,885 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-03-11 16:31:41,885 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-03-11 16:31:41,895 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 16:31:41,913 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-03-11 16:31:41,913 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-03-11 16:31:41,914 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-03-11 16:31:41,914 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-03-11 16:31:41,914 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-03-11 16:31:41,914 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-03-11 16:31:41,915 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-03-11 16:31:41,915 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-03-11 16:31:41,915 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-03-11 16:31:41,919 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'Doc'.

[Advice]
Check the exception messages and the stack traces.
* * * * * * * * * */
org.dbflute.exception.DfPropFileReadFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to parse the map file.

[Advice]
Make sure your map file format.
For example:
  (x):
    map:{
        ; map:{
            ...
    }
  (o):
    map:{
        ; map:{
            ...
        }
    }

[DfProp Path]
./dfprop/classificationDefinitionMap.dfprop
* * * * * * * * * */
	at org.dbflute.infra.dfprop.DfPropFile.throwDfPropMapStringParseFailureException(DfPropFile.java:177)
	at org.dbflute.infra.dfprop.DfPropFile.actuallyReadMap(DfPropFile.java:126)
	at org.dbflute.infra.dfprop.DfPropFile$1.readMap(DfPropFile.java:114)
	at org.dbflute.infra.dfprop.DfPropFile.callReadingMapChecked(DfPropFile.java:437)
	at org.dbflute.infra.dfprop.DfPropFile.doReadMap(DfPropFile.java:424)
	at org.dbflute.infra.dfprop.DfPropFile.readMap(DfPropFile.java:112)
	at org.dbflute.properties.propreader.DfOutsideMapPropReader.readMap(DfOutsideMapPropReader.java:43)
	at org.dbflute.properties.assistant.base.DfPropertyValueHandler.getOutsideMapProp(DfPropertyValueHandler.java:262)
	at org.dbflute.properties.assistant.base.DfPropertyValueHandler.mapProp(DfPropertyValueHandler.java:229)
	at org.dbflute.properties.DfAbstractDBFluteProperties.mapProp(DfAbstractDBFluteProperties.java:155)
	at org.dbflute.properties.DfClassificationProperties.getClassificationDefinitionMap(DfClassificationProperties.java:135)
	at org.dbflute.properties.DfClassificationProperties.initializeClassificationDefinition(DfClassificationProperties.java:318)
	at org.apache.torque.engine.database.model.Database.initializeClassificationDeployment(Database.java:1064)
	at org.apache.torque.engine.database.model.Database.initializeSupplementaryMetaData(Database.java:1023)
	at org.apache.torque.task.TorqueDocumentationTask.purelyInitializeSchemaHtmlSchemaData(TorqueDocumentationTask.java:442)
	at org.apache.torque.task.TorqueDocumentationTask.processSchemaHtml(TorqueDocumentationTask.java:277)
	at org.apache.torque.task.TorqueDocumentationTask.doExecute(TorqueDocumentationTask.java:235)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:192)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:78)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:416)
	at org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.java:105)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: org.dbflute.helper.dfmap.exception.DfMapParseFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
The last remainderString as map should be empty string but ...

[Generated Map]
{Flg=[{topComment=フラグを示す, codeType=Number}, {code=1, name=True, alias=はい, comment=有効を示す}, {code=0, name=False, alias=いいえ, comment=無効を示す}, $$ALL$$ = map:{suffix:_FLG=Flg]}

[Remainder String]
map:{
    ; Flg = list:{
            ; map:{topComment=フラグを示す; codeType=Number}
            ; map:{code=1; name=True ; alias=はい  ; comment=有効を示す}
            ; map:{code=0; name=False; alias=いいえ; comment=無効を示す}
            ; $$ALL$$ = map:{suffix:_FLG=Flg}
    }
    ; MemberStatus = list:{
            ; map:{topComment=入会から退会までの会員のステータスを示す; codeType=String}
            ; map:{
                ; table=MEMBER_STATUS
                ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
                ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
            }
    }
    ; ServiceRank = list:{
        ; map:{topComment=会員が受けられるサービスのランクを示す; codeType=String}
        ; map:{
            ; table=SERVICE_RANK
            ; code=SERVICE_RANK_CODE; name=SERVICE_RANK_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
        }
    }
    ; Region = list:{
        ; map:{topComment=主に会員の住んでいる地域を示す; codeType=Number}
        ; map:{
            ; table=REGION
            ; code=REGION_ID; name=REGION_NAME
            ; orderBy=REGION_ID
        }
    }
    ; WithdrawalReason = list:{
        ; map:{topComment=会員の退会理由。なのでちょっとねがてぃぶ; codeType=String}
        ; map:{
            ; table=WITHDRAWAL_REASON
            ; code=WITHDRAWAL_REASON_CODE; name=WITHDRAWAL_REASON_CODE
            ; comment=WITHDRAWAL_REASON_TEXT; orderBy=DISPLAY_ORDER
        }
    }
    ; ProductCategory = list:{
        ; map:{topComment=商品のカテゴリ。階層構造である; codeType=String}
        ; map:{
            ; table=$sql:PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
            ; code=$sql: loc.PRODUCT_CATEGORY_CODE
            ; name=$sql: loc.PRODUCT_CATEGORY_NAME
            ; comment=$sql: 'of ' || rel.PRODUCT_CATEGORY_NAME
            ; orderBy=loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
        }
    }
    ; ProductStatus = list:{
        ; map:{topComment=商品ステータス。あんまり面白みのないステータス; codeType=String}
        ; map:{
            ; table=PRODUCT_STATUS
            ; code=PRODUCT_STATUS_CODE; name=PRODUCT_STATUS_NAME
        }
    }
    ; PaymentMethod = list:{
        ; map:{
            ; topComment=支払方法; codeType=String
            ; isCheckImplicitSet=true
            ; groupingMap = map:{
                ; recommended = map:{
                    ; groupComment = 最も推奨されている方法
                    ; elementList = list:{ByHand}
                }
            }
        }
        ; map:{code=HAN; name=ByHand; alias=手渡し; comment=Face-to-Faceの手渡しで商品と交換}
        ; map:{code=BAK; name=BankTransfer; alias=銀行振込; comment=銀行振込で確認してから商品発送}
        ; map:{code=CRC; name=CreditCard; alias=クレジットカード; comment=クレジットカードの番号を教えてもらう}
    }
    ; PURCHASE_PAYMENT = map:{PAYMENT_METHOD_CODE=PaymentMethod}

}


[Current Remainder Index]
262 (max:2772)

    ; MemberStatus = list:{
 ...

[Defined Control Mark]
map: list: { } ; =
* * * * * * * * * */
	at org.dbflute.helper.dfmap.DfMapStyle.throwDfMapStringUnneededStringFoundException(DfMapStyle.java:1335)
	at org.dbflute.helper.dfmap.DfMapStyle.assertLastRemainderAsMap(DfMapStyle.java:1324)
	at org.dbflute.helper.dfmap.DfMapStyle.fromMapString(DfMapStyle.java:432)
	at org.dbflute.helper.dfmap.DfMapFile.readMap(DfMapFile.java:117)
	at org.dbflute.infra.dfprop.DfPropFile.actuallyReadMap(DfPropFile.java:121)
	... 48 more
2025-03-11 16:31:41,928 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s053ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-03-11 17:43:28,759 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-03-11 17:43:28,760 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-03-11 17:43:28,760 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-03-11 17:43:28,761 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-03-11 17:43:28,761 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-03-11 17:43:28,770 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 17:43:28,770 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 17:43:28,770 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 17:43:28,770 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 17:43:28,783 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-03-11 17:43:28,784 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-03-11 17:43:28,784 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-03-11 17:43:28,788 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 17:43:28,830 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-03-11 17:43:28,834 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-03-11 17:43:29,137 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-03-11 17:43:29,137 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-03-11 17:43:29,138 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-03-11 17:43:29,138 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-11 17:43:29,138 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 17:43:29,139 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-11 17:43:29,143 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-03-11 17:43:29,147 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-03-11 17:43:29,152 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-03-11 17:43:29,156 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-03-11 17:43:29,156 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-03-11 17:43:29,156 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-03-11 17:43:29,156 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-03-11 17:43:29,173 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-03-11 17:43:29,181 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-03-11 17:43:29,189 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-03-11 17:43:29,195 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-03-11 17:43:29,203 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-03-11 17:43:29,208 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-03-11 17:43:29,214 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-03-11 17:43:29,221 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-03-11 17:43:29,228 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-03-11 17:43:29,233 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-03-11 17:43:29,240 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-03-11 17:43:29,247 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-03-11 17:43:29,253 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-03-11 17:43:29,258 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-03-11 17:43:29,264 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-03-11 17:43:29,264 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-03-11 17:43:29,264 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-03-11 17:43:29,264 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-03-11 17:43:29,264 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-03-11 17:43:29,265 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-03-11 17:43:29,266 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-03-11 17:43:29,266 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-03-11 17:43:29,266 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-03-11 17:43:29,276 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-03-11 17:43:29,277 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 17:43:29,323 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1585) -  -> same as previous (schema diff)
2025-03-11 17:43:29,323 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-03-11 17:43:29,328 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s571ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-03-11 17:43:29,542 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-03-11 17:43:29,543 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-03-11 17:43:29,543 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-03-11 17:43:29,543 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-03-11 17:43:29,543 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-03-11 17:43:29,548 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 17:43:29,548 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 17:43:29,548 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 17:43:29,548 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 17:43:29,549 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-03-11 17:43:29,549 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-03-11 17:43:29,549 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-03-11 17:43:29,549 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-03-11 17:43:29,549 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-03-11 17:43:29,549 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-03-11 17:43:29,560 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 17:43:29,582 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-03-11 17:43:29,582 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-03-11 17:43:29,582 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-03-11 17:43:29,583 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-03-11 17:43:29,583 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-03-11 17:43:29,583 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-03-11 17:43:29,584 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-03-11 17:43:29,584 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-03-11 17:43:29,584 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-03-11 17:43:29,590 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 17:43:29,681 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-03-11 17:43:29,683 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-03-11 17:43:29,684 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-03-11 17:43:29,685 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-03-11 17:43:29,686 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-03-11 17:43:29,687 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-03-11 17:43:29,692 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-03-11 17:43:29,712 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2025-03-11 17:43:29,716 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-03-11 17:43:29,750 [main] INFO  (Database#doEnableDocumentOutputDirectory():1241) - ...Setting up documentOutputDirectory: ./output/doc
2025-03-11 17:43:29,752 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():242) - ...Loading schema history
2025-03-11 17:43:29,761 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():246) -  -> found history: count=1
2025-03-11 17:43:29,779 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():50) -  
2025-03-11 17:43:29,779 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():51) - ...Setting up arrange queries for documents (ArrangeQueryDoc)
2025-03-11 17:43:29,793 [main] INFO  (DfArrangeQueryDocSetupper#doExtractArrangeQuery():106) -  -> no arrange query
2025-03-11 17:43:29,901 [main] INFO  (DfRefreshMan#resolveProjectAutoDetect():105) - *Cannot auto-detect your refresh Eclipse proejct.
2025-03-11 17:43:29,901 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-03-11 17:43:29,901 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [$$AutoDetect$$] by http://localhost:8386/
2025-03-11 17:43:29,905 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-03-11 17:43:29,905 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-03-11 17:43:29,906 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-03-11 17:43:29,907 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s368ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-03-11 17:43:30,507 [main] INFO  (TorqueDataModelTask#begin():110) - +------------------------------------------+
2025-03-11 17:43:30,507 [main] INFO  (TorqueDataModelTask#begin():111) - |                                          |
2025-03-11 17:43:30,507 [main] INFO  (TorqueDataModelTask#begin():112) - |                 Generate                 |
2025-03-11 17:43:30,508 [main] INFO  (TorqueDataModelTask#begin():113) - |                                          |
2025-03-11 17:43:30,508 [main] INFO  (TorqueDataModelTask#begin():114) - +------------------------------------------+
2025-03-11 17:43:30,514 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 17:43:30,514 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 17:43:30,514 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 17:43:30,514 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 17:43:30,518 [main] INFO  (TorqueDataModelTask#setupControlTemplate():166) - 
2025-03-11 17:43:30,518 [main] INFO  (TorqueDataModelTask#setupControlTemplate():167) - ...Using Java control: om/ControlGenerateJava.vm
2025-03-11 17:43:30,526 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 17:43:30,540 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2025-03-11 17:43:30,542 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-03-11 17:43:30,591 [main] INFO  (Database#doEnableGenerateOutputDirectory():1209) - ...Setting up generateOutputDirectory: ../src/main/java
2025-03-11 17:43:30,592 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-03-11 17:43:30,592 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-03-11 17:43:30,592 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-03-11 17:43:30,592 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-03-11 17:43:30,593 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-03-11 17:43:30,593 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-03-11 17:43:30,593 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-03-11 17:43:30,593 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-03-11 17:43:30,594 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-03-11 17:43:30,597 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 17:43:30,681 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-03-11 17:43:30,682 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-03-11 17:43:30,683 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-03-11 17:43:30,684 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-03-11 17:43:30,685 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-03-11 17:43:30,687 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-03-11 17:43:30,691 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2025-03-11 17:43:30,694 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2025-03-11 17:43:30,698 [main] INFO  (Database#info():2872) - public void parseAllCommon() {
2025-03-11 17:43:30,699 [main] INFO  (Database#info():2872) -     parse('CDef');
2025-03-11 17:43:30,716 [main] INFO  (Database#info():2872) -     parse('DBCurrent');
2025-03-11 17:43:30,717 [main] INFO  (Database#info():2872) -     parse('DBFluteConfig');
2025-03-11 17:43:30,723 [main] INFO  (Database#info():2872) -     parse('DBFluteInitializer');
2025-03-11 17:43:30,724 [main] INFO  (Database#info():2872) -     parse('DBMetaInstanceHandler');
2025-03-11 17:43:30,730 [main] INFO  (Database#info():2872) -     parse('EntityDefinedCommonColumn');
2025-03-11 17:43:30,732 [main] INFO  (Database#info():2872) -     parse('ImplementedBehaviorSelector');
2025-03-11 17:43:30,735 [main] INFO  (Database#info():2872) -     parse('ImplementedCommonColumnAutoSetupper');
2025-03-11 17:43:30,737 [main] INFO  (Database#info():2872) -     parse('ImplementedInvokerAssistant');
2025-03-11 17:43:30,739 [main] INFO  (Database#info():2872) -     parse('ImplementedSqlClauseCreator');
2025-03-11 17:43:30,740 [main] INFO  (Database#info():2872) - }
2025-03-11 17:43:30,741 [main] INFO  (Database#info():2872) - public void parseContainerConfig() {
2025-03-11 17:43:30,741 [main] INFO  (Database#info():2872) -     parse('../resources/dbflute.xml')
2025-03-11 17:43:30,745 [main] INFO  (Database#info():2872) - }
2025-03-11 17:43:30,747 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldTableClass() {
2025-03-11 17:43:30,755 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-03-11 17:43:30,756 [main] INFO  (Database#info():2872) - public void parseTableClass() {
2025-03-11 17:43:30,756 [main] INFO  (Database#info():2872) -     parse('member');
2025-03-11 17:43:30,870 [main] INFO  (Database#info():2872) -     parse('member_address');
2025-03-11 17:43:30,928 [main] INFO  (Database#info():2872) -     parse('member_login');
2025-03-11 17:43:30,972 [main] INFO  (Database#info():2872) -     parse('member_security');
2025-03-11 17:43:31,009 [main] INFO  (Database#info():2872) -     parse('member_service');
2025-03-11 17:43:31,050 [main] INFO  (Database#info():2872) -     parse('member_status');
2025-03-11 17:43:31,088 [main] INFO  (Database#info():2872) -     parse('member_withdrawal');
2025-03-11 17:43:31,129 [main] INFO  (Database#info():2872) -     parse('product');
2025-03-11 17:43:31,184 [main] INFO  (Database#info():2872) -     parse('product_category');
2025-03-11 17:43:31,219 [main] INFO  (Database#info():2872) -     parse('product_status');
2025-03-11 17:43:31,252 [main] INFO  (Database#info():2872) -     parse('purchase');
2025-03-11 17:43:31,296 [main] INFO  (Database#info():2872) -     parse('purchase_payment');
2025-03-11 17:43:31,328 [main] INFO  (Database#info():2872) -     parse('region');
2025-03-11 17:43:31,355 [main] INFO  (Database#info():2872) -     parse('service_rank');
2025-03-11 17:43:31,386 [main] INFO  (Database#info():2872) -     parse('withdrawal_reason');
2025-03-11 17:43:31,415 [main] INFO  (Database#info():2872) - }
2025-03-11 17:43:31,415 [main] INFO  (Database#info():2872) -  
2025-03-11 17:43:31,428 [main] INFO  (DfRefreshMan#resolveProjectAutoDetect():105) - *Cannot auto-detect your refresh Eclipse proejct.
2025-03-11 17:43:31,428 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-03-11 17:43:31,428 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [$$AutoDetect$$] by http://localhost:8386/
2025-03-11 17:43:31,429 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-03-11 17:43:31,429 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-03-11 17:43:31,429 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-03-11 17:43:31,431 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s927ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2025-03-11 17:43:31,616 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2025-03-11 17:43:31,616 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2025-03-11 17:43:31,616 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2025-03-11 17:43:31,616 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2025-03-11 17:43:31,616 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2025-03-11 17:43:31,622 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 17:43:31,622 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 17:43:31,622 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 17:43:31,622 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 17:43:31,630 [main] INFO  (DfSqlFileFireMan#fire():93) - Fired SQL: success=0, failure=0 (in 0 files)
2025-03-11 17:43:31,632 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s018ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2025-03-11 17:43:31,824 [main] INFO  (DfSql2EntityTask#begin():106) - +------------------------------------------+
2025-03-11 17:43:31,824 [main] INFO  (DfSql2EntityTask#begin():107) - |                                          |
2025-03-11 17:43:31,824 [main] INFO  (DfSql2EntityTask#begin():108) - |                Sql2Entity                |
2025-03-11 17:43:31,824 [main] INFO  (DfSql2EntityTask#begin():109) - |                                          |
2025-03-11 17:43:31,825 [main] INFO  (DfSql2EntityTask#begin():110) - +------------------------------------------+
2025-03-11 17:43:31,830 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-11 17:43:31,830 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-11 17:43:31,830 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-11 17:43:31,830 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-11 17:43:31,834 [main] INFO  (DfSql2EntityTask#setupControlTemplate():177) - 
2025-03-11 17:43:31,834 [main] INFO  (DfSql2EntityTask#setupControlTemplate():178) - ...Using Java control: om/ControlSql2EntityJava.vm
2025-03-11 17:43:31,835 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-03-11 17:43:31,854 [main] INFO  (DfSqlFileFireMan#fire():93) - Fired SQL: success=0, failure=0 (in 0 files)
2025-03-11 17:43:31,861 [main] INFO  (DfSql2EntityTask#initControlContext():311) - 
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#initControlContext():312) - ...Preparing generation of customize-entities and parameter-beans
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#initControlContext():313) - * * * * * * * * * *
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#initControlContext():314) - * CustomizeEntity *
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#initControlContext():315) - * * * * * * * * * *
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#showParameterBean():932) - * * * * * * * * *
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#showParameterBean():933) - * ParameterBean *
2025-03-11 17:43:31,862 [main] INFO  (DfSql2EntityTask#showParameterBean():934) - * * * * * * * * *
2025-03-11 17:43:31,863 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2025-03-11 17:43:31,864 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-03-11 17:43:31,906 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-03-11 17:43:31,990 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-03-11 17:43:31,992 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-03-11 17:43:31,993 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-03-11 17:43:31,993 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-03-11 17:43:31,995 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-03-11 17:43:31,996 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-03-11 17:43:31,999 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-03-11 17:43:32,000 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-03-11 17:43:32,002 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1225) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2025-03-11 17:43:32,002 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldCustomizeClass() {
2025-03-11 17:43:32,004 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-03-11 17:43:32,004 [main] INFO  (Database#info():2872) - public void parseCustomizeEntity() {
2025-03-11 17:43:32,005 [main] INFO  (Database#info():2872) - }
2025-03-11 17:43:32,015 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():303) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2025-03-11 17:43:32,015 [main] INFO  (DfRefreshMan#resolveProjectAutoDetect():105) - *Cannot auto-detect your refresh Eclipse proejct.
2025-03-11 17:43:32,016 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-03-11 17:43:32,016 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [$$AutoDetect$$] by http://localhost:8386/
2025-03-11 17:43:32,017 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-03-11 17:43:32,017 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-03-11 17:43:32,017 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-03-11 17:43:32,018 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s197ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2025-03-18 16:28:11,374 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-03-18 16:28:11,375 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-03-18 16:28:11,375 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-03-18 16:28:11,376 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-03-18 16:28:11,376 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-03-18 16:28:11,377 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-03-18 16:28:13,418 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-03-18 16:28:13,418 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-03-18 16:28:13,419 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-03-18 16:28:13,419 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-03-18 16:28:13,424 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-03-18 16:28:13,666 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-03-18 16:28:13,666 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-03-18 16:28:13,671 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-03-18 16:28:13,671 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-03-18 16:28:13,671 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-03-18 16:28:13,671 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-03-18 16:28:13,671 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-03-18 16:28:13,671 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-03-18 16:28:13,676 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-18 16:28:13,676 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-18 16:28:13,676 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-18 16:28:13,694 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-03-18 16:28:13,699 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-03-18 16:28:13,703 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-03-18 16:28:13,708 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-03-18 16:28:13,713 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-03-18 16:28:13,721 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-03-18 16:28:13,729 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2025-03-18 16:28:13,744 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-03-18 16:28:13,749 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-03-18 16:28:13,754 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-03-18 16:28:13,759 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-03-18 16:28:13,766 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-03-18 16:28:13,772 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-03-18 16:28:13,777 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-03-18 16:28:13,783 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-03-18 16:28:13,787 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-03-18 16:28:13,792 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-03-18 16:28:13,800 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-03-18 16:28:13,808 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-03-18 16:28:13,812 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-03-18 16:28:13,819 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-03-18 16:28:13,828 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-03-18 16:28:13,835 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member
2025-03-18 16:28:13,838 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-03-18 16:28:13,840 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-03-18 16:28:13,842 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-03-18 16:28:13,845 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-03-18 16:28:13,847 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-03-18 16:28:13,849 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-03-18 16:28:13,852 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-03-18 16:28:13,854 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-03-18 16:28:13,856 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-03-18 16:28:13,858 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-03-18 16:28:13,861 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-03-18 16:28:13,863 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-03-18 16:28:13,865 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-03-18 16:28:13,867 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-03-18 16:28:13,883 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-03-18 16:28:13,884 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-03-18 16:28:13,884 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-03-18 16:28:13,884 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-03-18 16:28:13,884 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-03-18 16:28:13,884 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-03-18 16:28:13,885 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-03-18 16:28:13,886 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-03-18 16:28:13,887 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-03-18 16:28:13,887 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-03-18 16:28:13,900 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-03-18 16:28:13,901 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-03-18 16:28:13,901 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-03-18 16:28:13,901 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-03-18 16:28:13,905 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-03-18 16:28:13,905 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-03-18 16:28:13,906 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-03-18 16:28:13,906 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-03-18 16:28:13,907 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-03-18 16:28:13,908 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-03-18 16:28:13,908 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-03-18 16:28:13,908 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-03-18 16:28:13,908 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-03-18 16:28:13,908 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-03-18 16:28:13,911 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-03-18 16:28:13,917 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-03-18 16:28:13,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-03-18 16:28:13,926 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-03-18 16:28:13,930 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-03-18 16:28:13,934 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-03-18 16:28:13,939 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-03-18 16:28:13,944 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-03-18 16:28:13,949 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-03-18 16:28:13,953 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-03-18 16:28:13,956 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-03-18 16:28:13,959 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-03-18 16:28:13,963 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-03-18 16:28:13,967 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-03-18 16:28:13,972 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-03-18 16:28:13,976 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-03-18 16:28:13,988 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-18 16:28:13,997 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-03-18 16:28:14,008 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-03-18 16:28:14,017 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-18 16:28:14,026 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-18 16:28:14,035 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-03-18 16:28:14,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-18 16:28:14,053 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-18 16:28:14,062 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-03-18 16:28:14,072 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-03-18 16:28:14,082 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-03-18 16:28:14,093 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-03-18 16:28:14,104 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-03-18 16:28:14,118 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-03-18 16:28:14,130 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-03-18 16:28:14,139 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-03-18 16:28:14,151 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-03-18 16:28:14,163 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-03-18 16:28:14,167 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-03-18 16:28:14,172 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-03-18 16:28:14,179 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-03-18 16:28:14,185 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-03-18 16:28:14,192 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-03-18 16:28:14,198 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-03-18 16:28:14,205 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-03-18 16:28:14,205 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema.sql
2025-03-18 16:28:14,205 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-03-18 16:28:14,206 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 3 files)
2025-03-18 16:28:14,206 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-03-18 16:28:14,219 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-03-18 16:28:14,220 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-03-18 16:28:14,220 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-03-18 16:28:14,220 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-03-18 16:28:14,220 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-03-18 16:28:14,220 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-03-18 16:28:14,226 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-03-18 16:28:14,227 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/common/xls/10-master.xls)
2025-03-18 16:28:14,227 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-03-18 16:28:14,300 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-03-18 16:28:14,300 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-03-18 16:28:14,300 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-03-18 16:28:14,315 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-03-18 16:28:14,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-03-18 16:28:14,326 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-03-18 16:28:14,328 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-03-18 16:28:14,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-03-18 16:28:14,329 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-03-18 16:28:14,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-03-18 16:28:14,330 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-03-18 16:28:14,331 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-03-18 16:28:14,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2025-03-18 16:28:14,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2025-03-18 16:28:14,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2025-03-18 16:28:14,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2025-03-18 16:28:14,332 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2025-03-18 16:28:14,334 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-03-18 16:28:14,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-03-18 16:28:14,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-03-18 16:28:14,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-03-18 16:28:14,335 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-03-18 16:28:14,336 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-03-18 16:28:14,336 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-03-18 16:28:14,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-03-18 16:28:14,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-03-18 16:28:14,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-03-18 16:28:14,337 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-03-18 16:28:14,339 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-03-18 16:28:14,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-03-18 16:28:14,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-03-18 16:28:14,339 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-03-18 16:28:14,341 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-03-18 16:28:14,342 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-03-18 16:28:14,342 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/ut/xls/20-member.xls)
2025-03-18 16:28:14,342 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-03-18 16:28:14,364 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2025-03-18 16:28:14.363, foo, 2025-03-18 16:28:14.363, foo, 0}
2025-03-18 16:28:14,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2025-03-18 16:28:14.368, foo, 2025-03-18 16:28:14.368, foo, 0}
2025-03-18 16:28:14,368 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2025-03-18 16:28:14.368, foo, 2025-03-18 16:28:14.368, foo, 0}
2025-03-18 16:28:14,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2025-03-18 16:28:14.369, foo, 2025-03-18 16:28:14.369, foo, 0}
2025-03-18 16:28:14,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2025-03-18 16:28:14.369, foo, 2025-03-18 16:28:14.369, foo, 0}
2025-03-18 16:28:14,369 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2025-03-18 16:28:14.369, foo, 2025-03-18 16:28:14.369, foo, 0}
2025-03-18 16:28:14,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2025-03-18 16:28:14.37, foo, 2025-03-18 16:28:14.37, foo, 0}
2025-03-18 16:28:14,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2025-03-18 16:28:14.37, foo, 2025-03-18 16:28:14.37, foo, 0}
2025-03-18 16:28:14,370 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2025-03-18 16:28:14.37, foo, 2025-03-18 16:28:14.37, foo, 0}
2025-03-18 16:28:14,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2025-03-18 16:28:14.371, foo, 2025-03-18 16:28:14.371, foo, 0}
2025-03-18 16:28:14,371 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2025-03-18 16:28:14.371, foo, 2025-03-18 16:28:14.371, foo, 0}
2025-03-18 16:28:14,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2025-03-18 16:28:14.372, foo, 2025-03-18 16:28:14.372, foo, 0}
2025-03-18 16:28:14,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2025-03-18 16:28:14.372, foo, 2025-03-18 16:28:14.372, foo, 0}
2025-03-18 16:28:14,372 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2025-03-18 16:28:14.372, foo, 2025-03-18 16:28:14.372, foo, 0}
2025-03-18 16:28:14,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2025-03-18 16:28:14.373, foo, 2025-03-18 16:28:14.373, foo, 0}
2025-03-18 16:28:14,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2025-03-18 16:28:14.373, foo, 2025-03-18 16:28:14.373, foo, 0}
2025-03-18 16:28:14,373 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2025-03-18 16:28:14.373, foo, 2025-03-18 16:28:14.373, foo, 0}
2025-03-18 16:28:14,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2025-03-18 16:28:14.374, foo, 2025-03-18 16:28:14.374, foo, 0}
2025-03-18 16:28:14,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2025-03-18 16:28:14.374, foo, 2025-03-18 16:28:14.374, foo, 0}
2025-03-18 16:28:14,374 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2025-03-18 16:28:14.374, foo, 2025-03-18 16:28:14.374, foo, 0}
2025-03-18 16:28:14,381 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER
2025-03-18 16:28:14,381 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2025-03-18 16:28:14.381, foo, 2025-03-18 16:28:14.381, foo, 0}
2025-03-18 16:28:14,382 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2025-03-18 16:28:14.382, foo, 2025-03-18 16:28:14.382, foo, 0}
2025-03-18 16:28:14,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2025-03-18 16:28:14.383, foo, 2025-03-18 16:28:14.383, foo, 0}
2025-03-18 16:28:14,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2025-03-18 16:28:14.383, foo, 2025-03-18 16:28:14.383, foo, 0}
2025-03-18 16:28:14,383 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2025-03-18 16:28:14.383, foo, 2025-03-18 16:28:14.383, foo, 0}
2025-03-18 16:28:14,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2025-03-18 16:28:14.384, foo, 2025-03-18 16:28:14.384, foo, 0}
2025-03-18 16:28:14,384 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2025-03-18 16:28:14.384, foo, 2025-03-18 16:28:14.384, foo, 0}
2025-03-18 16:28:14,385 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2025-03-18 16:28:14.385, foo, 2025-03-18 16:28:14.385, foo, 0}
2025-03-18 16:28:14,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2025-03-18 16:28:14.386, foo, 2025-03-18 16:28:14.386, foo, 0}
2025-03-18 16:28:14,386 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2025-03-18 16:28:14.386, foo, 2025-03-18 16:28:14.386, foo, 0}
2025-03-18 16:28:14,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2025-03-18 16:28:14.387, foo, 2025-03-18 16:28:14.387, foo, 0}
2025-03-18 16:28:14,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2025-03-18 16:28:14.387, foo, 2025-03-18 16:28:14.387, foo, 0}
2025-03-18 16:28:14,387 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2025-03-18 16:28:14.387, foo, 2025-03-18 16:28:14.387, foo, 0}
2025-03-18 16:28:14,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2025-03-18 16:28:14.388, foo, 2025-03-18 16:28:14.388, foo, 0}
2025-03-18 16:28:14,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2025-03-18 16:28:14.388, foo, 2025-03-18 16:28:14.388, foo, 0}
2025-03-18 16:28:14,388 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2025-03-18 16:28:14.388, foo, 2025-03-18 16:28:14.388, foo, 0}
2025-03-18 16:28:14,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2025-03-18 16:28:14.389, foo, 2025-03-18 16:28:14.389, foo, 0}
2025-03-18 16:28:14,389 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2025-03-18 16:28:14.389, foo, 2025-03-18 16:28:14.389, foo, 0}
2025-03-18 16:28:14,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2025-03-18 16:28:14.39, foo, 2025-03-18 16:28:14.39, foo, 0}
2025-03-18 16:28:14,390 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2025-03-18 16:28:14.39, foo, 2025-03-18 16:28:14.39, foo, 0}
2025-03-18 16:28:14,396 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_ADDRESS
2025-03-18 16:28:14,396 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2025-03-18 16:28:14,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2025-03-18 16:28:14,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2025-03-18 16:28:14,397 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2025-03-18 16:28:14,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2025-03-18 16:28:14,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2025-03-18 16:28:14,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2025-03-18 16:28:14,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2025-03-18 16:28:14,398 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2025-03-18 16:28:14,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2025-03-18 16:28:14,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2025-03-18 16:28:14,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2025-03-18 16:28:14,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2025-03-18 16:28:14,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2025-03-18 16:28:14,399 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2025-03-18 16:28:14,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2025-03-18 16:28:14,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2025-03-18 16:28:14,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2025-03-18 16:28:14,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2025-03-18 16:28:14,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2025-03-18 16:28:14,400 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2025-03-18 16:28:14,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2025-03-18 16:28:14,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2025-03-18 16:28:14,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2025-03-18 16:28:14,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2025-03-18 16:28:14,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2025-03-18 16:28:14,401 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2025-03-18 16:28:14,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2025-03-18 16:28:14,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2025-03-18 16:28:14,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2025-03-18 16:28:14,402 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2025-03-18 16:28:14,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2025-03-18 16:28:14,403 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2025-03-18 16:28:14,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2025-03-18 16:28:14,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2025-03-18 16:28:14,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2025-03-18 16:28:14,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2025-03-18 16:28:14,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2025-03-18 16:28:14,404 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2025-03-18 16:28:14,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2025-03-18 16:28:14,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2025-03-18 16:28:14,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2025-03-18 16:28:14,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2025-03-18 16:28:14,405 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2025-03-18 16:28:14,406 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2025-03-18 16:28:14,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2025-03-18 16:28:14,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2025-03-18 16:28:14,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2025-03-18 16:28:14,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2025-03-18 16:28:14,407 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2025-03-18 16:28:14,417 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 56 rows are loaded to MEMBER_LOGIN
2025-03-18 16:28:14,417 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2025-03-18 16:28:14.417, foo, 2025-03-18 16:28:14.417, foo, 0}
2025-03-18 16:28:14,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2025-03-18 16:28:14.418, foo, 2025-03-18 16:28:14.418, foo, 0}
2025-03-18 16:28:14,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2025-03-18 16:28:14.418, foo, 2025-03-18 16:28:14.418, foo, 0}
2025-03-18 16:28:14,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2025-03-18 16:28:14.418, foo, 2025-03-18 16:28:14.418, foo, 0}
2025-03-18 16:28:14,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2025-03-18 16:28:14.418, foo, 2025-03-18 16:28:14.418, foo, 0}
2025-03-18 16:28:14,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2025-03-18 16:28:14.418, foo, 2025-03-18 16:28:14.418, foo, 0}
2025-03-18 16:28:14,418 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2025-03-18 16:28:14.418, foo, 2025-03-18 16:28:14.418, foo, 0}
2025-03-18 16:28:14,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2025-03-18 16:28:14.419, foo, 2025-03-18 16:28:14.419, foo, 0}
2025-03-18 16:28:14,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2025-03-18 16:28:14.419, foo, 2025-03-18 16:28:14.419, foo, 0}
2025-03-18 16:28:14,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2025-03-18 16:28:14.419, foo, 2025-03-18 16:28:14.419, foo, 0}
2025-03-18 16:28:14,419 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2025-03-18 16:28:14.419, foo, 2025-03-18 16:28:14.419, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,420 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2025-03-18 16:28:14.42, foo, 2025-03-18 16:28:14.42, foo, 0}
2025-03-18 16:28:14,421 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2025-03-18 16:28:14.421, foo, 2025-03-18 16:28:14.421, foo, 0}
2025-03-18 16:28:14,425 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SECURITY
2025-03-18 16:28:14,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{1, 1234, PLT, 2025-03-18 16:28:14.425, foo, 2025-03-18 16:28:14.425, foo, 0}
2025-03-18 16:28:14,425 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{2, 2345, GLD, 2025-03-18 16:28:14.425, foo, 2025-03-18 16:28:14.425, foo, 0}
2025-03-18 16:28:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{3, 3456, GLD, 2025-03-18 16:28:14.426, foo, 2025-03-18 16:28:14.426, foo, 0}
2025-03-18 16:28:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{4, 875, BRZ, 2025-03-18 16:28:14.426, foo, 2025-03-18 16:28:14.426, foo, 0}
2025-03-18 16:28:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{5, 1111, BRZ, 2025-03-18 16:28:14.426, foo, 2025-03-18 16:28:14.426, foo, 0}
2025-03-18 16:28:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{6, 5422, SIL, 2025-03-18 16:28:14.426, foo, 2025-03-18 16:28:14.426, foo, 0}
2025-03-18 16:28:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{7, 24678, SIL, 2025-03-18 16:28:14.426, foo, 2025-03-18 16:28:14.426, foo, 0}
2025-03-18 16:28:14,426 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{8, 234, SIL, 2025-03-18 16:28:14.426, foo, 2025-03-18 16:28:14.426, foo, 0}
2025-03-18 16:28:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{9, 3, SIL, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{10, 98765, PLT, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{11, 34, GLD, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{12, 532, PLT, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{13, 23678, GLD, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,429 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{14, 432, GLD, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{15, 543, BRZ, 2025-03-18 16:28:14.429, foo, 2025-03-18 16:28:14.429, foo, 0}
2025-03-18 16:28:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{16, 23545, PLT, 2025-03-18 16:28:14.43, foo, 2025-03-18 16:28:14.43, foo, 0}
2025-03-18 16:28:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{17, 2345, GLD, 2025-03-18 16:28:14.43, foo, 2025-03-18 16:28:14.43, foo, 0}
2025-03-18 16:28:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{18, 8763, SIL, 2025-03-18 16:28:14.43, foo, 2025-03-18 16:28:14.43, foo, 0}
2025-03-18 16:28:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{19, 34567, SIL, 2025-03-18 16:28:14.43, foo, 2025-03-18 16:28:14.43, foo, 0}
2025-03-18 16:28:14,430 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{20, 43, GLD, 2025-03-18 16:28:14.43, foo, 2025-03-18 16:28:14.43, foo, 0}
2025-03-18 16:28:14,435 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SERVICE
2025-03-18 16:28:14,435 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2025-03-18 16:28:14.435, foo, 2025-03-18 16:28:14.435, foo}
2025-03-18 16:28:14,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2025-03-18 16:28:14.436, foo, 2025-03-18 16:28:14.436, foo}
2025-03-18 16:28:14,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2025-03-18 16:28:14.436, foo, 2025-03-18 16:28:14.436, foo}
2025-03-18 16:28:14,436 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2025-03-18 16:28:14.436, foo, 2025-03-18 16:28:14.436, foo}
2025-03-18 16:28:14,438 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2025-03-18 16:28:14,438 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-03-18 16:28:14,438 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/ut/xls/30-product.xls)
2025-03-18 16:28:14,441 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-03-18 16:28:14,455 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2025-03-18 16:28:14.455, foo, 2025-03-18 16:28:14.455, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,456 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2025-03-18 16:28:14.456, foo, 2025-03-18 16:28:14.456, foo, 0}
2025-03-18 16:28:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2025-03-18 16:28:14.457, foo, 2025-03-18 16:28:14.457, foo, 0}
2025-03-18 16:28:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2025-03-18 16:28:14.457, foo, 2025-03-18 16:28:14.457, foo, 0}
2025-03-18 16:28:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2025-03-18 16:28:14.457, foo, 2025-03-18 16:28:14.457, foo, 0}
2025-03-18 16:28:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2025-03-18 16:28:14.457, foo, 2025-03-18 16:28:14.457, foo, 0}
2025-03-18 16:28:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2025-03-18 16:28:14.457, foo, 2025-03-18 16:28:14.457, foo, 0}
2025-03-18 16:28:14,457 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2025-03-18 16:28:14.457, foo, 2025-03-18 16:28:14.457, foo, 0}
2025-03-18 16:28:14,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2025-03-18 16:28:14.458, foo, 2025-03-18 16:28:14.458, foo, 0}
2025-03-18 16:28:14,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2025-03-18 16:28:14.458, foo, 2025-03-18 16:28:14.458, foo, 0}
2025-03-18 16:28:14,458 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2025-03-18 16:28:14.458, foo, 2025-03-18 16:28:14.458, foo, 0}
2025-03-18 16:28:14,462 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to PRODUCT
2025-03-18 16:28:14,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2025-03-18 16:28:14.462, foo, 2025-03-18 16:28:14.462, foo, 0}
2025-03-18 16:28:14,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2025-03-18 16:28:14.463, foo, 2025-03-18 16:28:14.463, foo, 0}
2025-03-18 16:28:14,463 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2025-03-18 16:28:14.463, foo, 2025-03-18 16:28:14.463, foo, 0}
2025-03-18 16:28:14,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2025-03-18 16:28:14.464, foo, 2025-03-18 16:28:14.464, foo, 0}
2025-03-18 16:28:14,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2025-03-18 16:28:14.464, foo, 2025-03-18 16:28:14.464, foo, 0}
2025-03-18 16:28:14,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2025-03-18 16:28:14.464, foo, 2025-03-18 16:28:14.464, foo, 0}
2025-03-18 16:28:14,464 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2025-03-18 16:28:14.464, foo, 2025-03-18 16:28:14.464, foo, 0}
2025-03-18 16:28:14,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2025-03-18 16:28:14.465, foo, 2025-03-18 16:28:14.465, foo, 0}
2025-03-18 16:28:14,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2025-03-18 16:28:14.465, foo, 2025-03-18 16:28:14.465, foo, 0}
2025-03-18 16:28:14,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2025-03-18 16:28:14.465, foo, 2025-03-18 16:28:14.465, foo, 0}
2025-03-18 16:28:14,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2025-03-18 16:28:14.465, foo, 2025-03-18 16:28:14.465, foo, 0}
2025-03-18 16:28:14,465 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2025-03-18 16:28:14.465, foo, 2025-03-18 16:28:14.465, foo, 0}
2025-03-18 16:28:14,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2025-03-18 16:28:14.466, foo, 2025-03-18 16:28:14.466, foo, 0}
2025-03-18 16:28:14,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2025-03-18 16:28:14.466, foo, 2025-03-18 16:28:14.466, foo, 0}
2025-03-18 16:28:14,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2025-03-18 16:28:14.466, foo, 2025-03-18 16:28:14.466, foo, 0}
2025-03-18 16:28:14,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2025-03-18 16:28:14.466, foo, 2025-03-18 16:28:14.466, foo, 0}
2025-03-18 16:28:14,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2025-03-18 16:28:14.466, foo, 2025-03-18 16:28:14.466, foo, 0}
2025-03-18 16:28:14,466 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2025-03-18 16:28:14.466, foo, 2025-03-18 16:28:14.466, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,467 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2025-03-18 16:28:14.467, foo, 2025-03-18 16:28:14.467, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,468 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2025-03-18 16:28:14.468, foo, 2025-03-18 16:28:14.468, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,469 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2025-03-18 16:28:14.469, foo, 2025-03-18 16:28:14.469, foo, 0}
2025-03-18 16:28:14,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2025-03-18 16:28:14.47, foo, 2025-03-18 16:28:14.47, foo, 0}
2025-03-18 16:28:14,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2025-03-18 16:28:14.47, foo, 2025-03-18 16:28:14.47, foo, 0}
2025-03-18 16:28:14,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2025-03-18 16:28:14.47, foo, 2025-03-18 16:28:14.47, foo, 0}
2025-03-18 16:28:14,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2025-03-18 16:28:14.47, foo, 2025-03-18 16:28:14.47, foo, 0}
2025-03-18 16:28:14,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2025-03-18 16:28:14.47, foo, 2025-03-18 16:28:14.47, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2025-03-18 16:28:14.47, foo, 2025-03-18 16:28:14.47, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2025-03-18 16:28:14.471, foo, 2025-03-18 16:28:14.471, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,472 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2025-03-18 16:28:14.472, foo, 2025-03-18 16:28:14.472, foo, 0}
2025-03-18 16:28:14,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2025-03-18 16:28:14.473, foo, 2025-03-18 16:28:14.473, foo, 0}
2025-03-18 16:28:14,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2025-03-18 16:28:14.473, foo, 2025-03-18 16:28:14.473, foo, 0}
2025-03-18 16:28:14,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2025-03-18 16:28:14.473, foo, 2025-03-18 16:28:14.473, foo, 0}
2025-03-18 16:28:14,473 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2025-03-18 16:28:14.473, foo, 2025-03-18 16:28:14.473, foo, 0}
2025-03-18 16:28:14,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2025-03-18 16:28:14.474, foo, 2025-03-18 16:28:14.474, foo, 0}
2025-03-18 16:28:14,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2025-03-18 16:28:14.474, foo, 2025-03-18 16:28:14.474, foo, 0}
2025-03-18 16:28:14,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2025-03-18 16:28:14.474, foo, 2025-03-18 16:28:14.474, foo, 0}
2025-03-18 16:28:14,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2025-03-18 16:28:14.474, foo, 2025-03-18 16:28:14.474, foo, 0}
2025-03-18 16:28:14,474 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2025-03-18 16:28:14.474, foo, 2025-03-18 16:28:14.474, foo, 0}
2025-03-18 16:28:14,486 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 70 rows are loaded to PURCHASE
2025-03-18 16:28:14,486 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2025-03-18 16:28:14.486, foo, 2025-03-18 16:28:14.486, foo}
2025-03-18 16:28:14,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2025-03-18 16:28:14.487, foo, 2025-03-18 16:28:14.487, foo}
2025-03-18 16:28:14,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2025-03-18 16:28:14.487, foo, 2025-03-18 16:28:14.487, foo}
2025-03-18 16:28:14,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2025-03-18 16:28:14.487, foo, 2025-03-18 16:28:14.487, foo}
2025-03-18 16:28:14,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2025-03-18 16:28:14.487, foo, 2025-03-18 16:28:14.487, foo}
2025-03-18 16:28:14,487 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2025-03-18 16:28:14.487, foo, 2025-03-18 16:28:14.487, foo}
2025-03-18 16:28:14,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2025-03-18 16:28:14.488, foo, 2025-03-18 16:28:14.488, foo}
2025-03-18 16:28:14,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2025-03-18 16:28:14.488, foo, 2025-03-18 16:28:14.488, foo}
2025-03-18 16:28:14,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2025-03-18 16:28:14.488, foo, 2025-03-18 16:28:14.488, foo}
2025-03-18 16:28:14,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2025-03-18 16:28:14.488, foo, 2025-03-18 16:28:14.488, foo}
2025-03-18 16:28:14,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2025-03-18 16:28:14.488, foo, 2025-03-18 16:28:14.488, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2025-03-18 16:28:14.488, foo, 2025-03-18 16:28:14.488, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2025-03-18 16:28:14.489, foo, 2025-03-18 16:28:14.489, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,490 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2025-03-18 16:28:14.49, foo, 2025-03-18 16:28:14.49, foo}
2025-03-18 16:28:14,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-03-18 16:28:14.491, foo, 2025-03-18 16:28:14.491, foo}
2025-03-18 16:28:14,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-03-18 16:28:14.491, foo, 2025-03-18 16:28:14.491, foo}
2025-03-18 16:28:14,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-03-18 16:28:14.491, foo, 2025-03-18 16:28:14.491, foo}
2025-03-18 16:28:14,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2025-03-18 16:28:14.491, foo, 2025-03-18 16:28:14.491, foo}
2025-03-18 16:28:14,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2025-03-18 16:28:14.491, foo, 2025-03-18 16:28:14.491, foo}
2025-03-18 16:28:14,491 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2025-03-18 16:28:14.491, foo, 2025-03-18 16:28:14.491, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,492 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2025-03-18 16:28:14.492, foo, 2025-03-18 16:28:14.492, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,493 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2025-03-18 16:28:14.493, foo, 2025-03-18 16:28:14.493, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,494 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2025-03-18 16:28:14.494, foo, 2025-03-18 16:28:14.494, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,495 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2025-03-18 16:28:14.495, foo, 2025-03-18 16:28:14.495, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,496 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2025-03-18 16:28:14.496, foo, 2025-03-18 16:28:14.496, foo}
2025-03-18 16:28:14,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2025-03-18 16:28:14.497, foo, 2025-03-18 16:28:14.497, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,498 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2025-03-18 16:28:14.498, foo, 2025-03-18 16:28:14.498, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,499 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2025-03-18 16:28:14.499, foo, 2025-03-18 16:28:14.499, foo}
2025-03-18 16:28:14,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2025-03-18 16:28:14.5, foo, 2025-03-18 16:28:14.5, foo}
2025-03-18 16:28:14,500 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2025-03-18 16:28:14.5, foo, 2025-03-18 16:28:14.5, foo}
2025-03-18 16:28:14,514 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2025-03-18 16:28:14,515 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():387) - ...Checking implicit set of classification
2025-03-18 16:28:14,521 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-03-18 16:28:14,532 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-03-18 16:28:14,534 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-03-18 16:28:14,535 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-03-18 16:28:14,536 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-03-18 16:28:14,537 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-03-18 16:28:14,538 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-03-18 16:28:14,542 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2025-03-18 16:28:14,542 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2025-03-18 16:28:14,543 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2025-03-18 16:28:14,543 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2025-03-18 16:28:14,543 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2025-03-18 16:28:14,545 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-03-18 16:28:14,545 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-03-18 16:28:14,545 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-03-18 16:28:14,545 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-03-18 16:28:14,545 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-03-18 16:28:14,545 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-03-18 16:28:14,547 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-03-18 16:28:14,547 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-03-18 16:28:14,547 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-03-18 16:28:14,548 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-03-18 16:28:14,549 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s180ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 3 files) - 00m00s537ms
  (Initialize Schema) - 00m00s212ms
  (Create Schema) - 00m00s323ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema.sql

 Load Data: common:{xls=1}, ut:{xls=2} - 00m00s324ms
  <common>
  o 10-master.xls
  <ut>
  o 20-member.xls
  o 30-product.xls

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-04-22 15:28:25,237 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-04-22 15:28:25,238 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-04-22 15:28:25,239 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-04-22 15:28:25,239 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-04-22 15:28:25,239 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-04-22 15:28:25,247 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-04-22 15:28:25,247 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-04-22 15:28:25,247 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-04-22 15:28:25,247 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-04-22 15:28:25,259 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-04-22 15:28:25,259 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-04-22 15:28:25,259 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-04-22 15:28:25,263 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-04-22 15:28:25,298 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-04-22 15:28:25,301 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-04-22 15:28:25,544 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-04-22 15:28:25,544 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-04-22 15:28:25,544 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-04-22 15:28:25,545 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-04-22 15:28:25,545 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 15:28:25,545 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-04-22 15:28:25,552 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-04-22 15:28:25,554 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-04-22 15:28:25,560 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-04-22 15:28:25,563 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-04-22 15:28:25,564 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-04-22 15:28:25,564 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-04-22 15:28:25,564 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-04-22 15:28:25,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-04-22 15:28:25,598 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-04-22 15:28:25,607 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-04-22 15:28:25,616 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-04-22 15:28:25,623 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-04-22 15:28:25,629 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-04-22 15:28:25,635 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-04-22 15:28:25,645 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-04-22 15:28:25,653 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-04-22 15:28:25,659 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-04-22 15:28:25,668 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-04-22 15:28:25,674 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-04-22 15:28:25,679 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-04-22 15:28:25,686 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-04-22 15:28:25,693 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-04-22 15:28:25,693 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-04-22 15:28:25,693 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-04-22 15:28:25,693 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-04-22 15:28:25,693 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-04-22 15:28:25,694 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-04-22 15:28:25,695 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-04-22 15:28:25,695 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-04-22 15:28:25,695 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-04-22 15:28:25,709 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-04-22 15:28:25,710 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-04-22 15:28:25,747 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1585) -  -> same as previous (schema diff)
2025-04-22 15:28:25,747 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-04-22 15:28:25,752 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s518ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-04-22 15:28:25,963 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-04-22 15:28:25,964 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-04-22 15:28:25,964 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-04-22 15:28:25,964 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-04-22 15:28:25,964 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-04-22 15:28:25,970 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-04-22 15:28:25,970 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-04-22 15:28:25,970 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-04-22 15:28:25,971 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-04-22 15:28:25,971 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-04-22 15:28:25,971 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-04-22 15:28:25,971 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-04-22 15:28:25,971 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-04-22 15:28:25,971 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-04-22 15:28:25,971 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-04-22 15:28:25,982 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-04-22 15:28:26,003 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-04-22 15:28:26,003 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-04-22 15:28:26,003 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-04-22 15:28:26,003 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-04-22 15:28:26,004 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-04-22 15:28:26,004 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-04-22 15:28:26,004 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-04-22 15:28:26,004 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-04-22 15:28:26,006 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2025-04-22 15:28:26,008 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2025-04-22 15:28:26,008 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2025-04-22 15:28:26,008 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2025-04-22 15:28:26,008 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-04-22 15:28:26,014 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 15:28:26,100 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-04-22 15:28:26,102 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-04-22 15:28:26,105 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-04-22 15:28:26,107 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-04-22 15:28:26,109 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-04-22 15:28:26,111 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-04-22 15:28:26,116 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-04-22 15:28:26,136 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2025-04-22 15:28:26,139 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-04-22 15:28:26,171 [main] INFO  (Database#doEnableDocumentOutputDirectory():1241) - ...Setting up documentOutputDirectory: ./output/doc
2025-04-22 15:28:26,173 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():242) - ...Loading schema history
2025-04-22 15:28:26,180 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():246) -  -> found history: count=1
2025-04-22 15:28:26,197 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():50) -  
2025-04-22 15:28:26,197 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():51) - ...Setting up arrange queries for documents (ArrangeQueryDoc)
2025-04-22 15:28:26,209 [main] INFO  (DfArrangeQueryDocSetupper#doExtractArrangeQuery():106) -  -> no arrange query
2025-04-22 15:28:26,307 [main] INFO  (DfRefreshMan#resolveProjectAutoDetect():105) - *Cannot auto-detect your refresh Eclipse proejct.
2025-04-22 15:28:26,307 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-04-22 15:28:26,307 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [$$AutoDetect$$] by http://localhost:8386/
2025-04-22 15:28:26,311 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-04-22 15:28:26,311 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-04-22 15:28:26,312 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-04-22 15:28:26,313 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s353ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-04-22 15:28:26,882 [main] INFO  (TorqueDataModelTask#begin():110) - +------------------------------------------+
2025-04-22 15:28:26,883 [main] INFO  (TorqueDataModelTask#begin():111) - |                                          |
2025-04-22 15:28:26,883 [main] INFO  (TorqueDataModelTask#begin():112) - |                 Generate                 |
2025-04-22 15:28:26,883 [main] INFO  (TorqueDataModelTask#begin():113) - |                                          |
2025-04-22 15:28:26,883 [main] INFO  (TorqueDataModelTask#begin():114) - +------------------------------------------+
2025-04-22 15:28:26,889 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-04-22 15:28:26,889 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-04-22 15:28:26,889 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-04-22 15:28:26,889 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-04-22 15:28:26,893 [main] INFO  (TorqueDataModelTask#setupControlTemplate():166) - 
2025-04-22 15:28:26,893 [main] INFO  (TorqueDataModelTask#setupControlTemplate():167) - ...Using Java control: om/ControlGenerateJava.vm
2025-04-22 15:28:26,903 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-04-22 15:28:26,918 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2025-04-22 15:28:26,920 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-04-22 15:28:26,967 [main] INFO  (Database#doEnableGenerateOutputDirectory():1209) - ...Setting up generateOutputDirectory: ../src/main/java
2025-04-22 15:28:26,968 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-04-22 15:28:26,968 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-04-22 15:28:26,968 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-04-22 15:28:26,968 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-04-22 15:28:26,968 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-04-22 15:28:26,969 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-04-22 15:28:26,969 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-04-22 15:28:26,969 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-04-22 15:28:26,970 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():79) - FK_MEMBER_MEMBER_ADDRESS_VALID
2025-04-22 15:28:26,972 [main] INFO  (DfAdditionalForeignKeyInitializer#setupForeignKeyToTable():209) -   *Referrer setting was not allowed in this case
2025-04-22 15:28:26,972 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():344) -   Add foreign key member.[MEMBER_ID] to MEMBER_ADDRESS.[MEMBER_ID]
2025-04-22 15:28:26,972 [main] INFO  (DfAdditionalForeignKeyInitializer#showResult():346) -   with $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null\n     and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
2025-04-22 15:28:26,972 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-04-22 15:28:26,975 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 15:28:27,060 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-04-22 15:28:27,062 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-04-22 15:28:27,063 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-04-22 15:28:27,064 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-04-22 15:28:27,065 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-04-22 15:28:27,066 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-04-22 15:28:27,070 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2025-04-22 15:28:27,073 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2025-04-22 15:28:27,077 [main] INFO  (Database#info():2872) - public void parseAllCommon() {
2025-04-22 15:28:27,082 [main] INFO  (Database#info():2872) -     parse('CDef');
2025-04-22 15:28:27,096 [main] INFO  (Database#info():2872) -     parse('DBCurrent');
2025-04-22 15:28:27,097 [main] INFO  (Database#info():2872) -     parse('DBFluteConfig');
2025-04-22 15:28:27,101 [main] INFO  (Database#info():2872) -     parse('DBFluteInitializer');
2025-04-22 15:28:27,103 [main] INFO  (Database#info():2872) -     parse('DBMetaInstanceHandler');
2025-04-22 15:28:27,107 [main] INFO  (Database#info():2872) -     parse('EntityDefinedCommonColumn');
2025-04-22 15:28:27,108 [main] INFO  (Database#info():2872) -     parse('ImplementedBehaviorSelector');
2025-04-22 15:28:27,111 [main] INFO  (Database#info():2872) -     parse('ImplementedCommonColumnAutoSetupper');
2025-04-22 15:28:27,112 [main] INFO  (Database#info():2872) -     parse('ImplementedInvokerAssistant');
2025-04-22 15:28:27,115 [main] INFO  (Database#info():2872) -     parse('ImplementedSqlClauseCreator');
2025-04-22 15:28:27,116 [main] INFO  (Database#info():2872) - }
2025-04-22 15:28:27,116 [main] INFO  (Database#info():2872) - public void parseContainerConfig() {
2025-04-22 15:28:27,116 [main] INFO  (Database#info():2872) -     parse('../resources/dbflute.xml')
2025-04-22 15:28:27,120 [main] INFO  (Database#info():2872) - }
2025-04-22 15:28:27,121 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldTableClass() {
2025-04-22 15:28:27,128 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-04-22 15:28:27,128 [main] INFO  (Database#info():2872) - public void parseTableClass() {
2025-04-22 15:28:27,128 [main] INFO  (Database#info():2872) -     parse('member');
2025-04-22 15:28:27,238 [main] INFO  (Database#info():2872) -     parse('member_address');
2025-04-22 15:28:27,309 [main] INFO  (Database#info():2872) -     parse('member_login');
2025-04-22 15:28:27,354 [main] INFO  (Database#info():2872) -     parse('member_security');
2025-04-22 15:28:27,395 [main] INFO  (Database#info():2872) -     parse('member_service');
2025-04-22 15:28:27,443 [main] INFO  (Database#info():2872) -     parse('member_status');
2025-04-22 15:28:27,487 [main] INFO  (Database#info():2872) -     parse('member_withdrawal');
2025-04-22 15:28:27,530 [main] INFO  (Database#info():2872) -     parse('product');
2025-04-22 15:28:27,587 [main] INFO  (Database#info():2872) -     parse('product_category');
2025-04-22 15:28:27,630 [main] INFO  (Database#info():2872) -     parse('product_status');
2025-04-22 15:28:27,666 [main] INFO  (Database#info():2872) -     parse('purchase');
2025-04-22 15:28:27,717 [main] INFO  (Database#info():2872) -     parse('purchase_payment');
2025-04-22 15:28:27,752 [main] INFO  (Database#info():2872) -     parse('region');
2025-04-22 15:28:27,782 [main] INFO  (Database#info():2872) -     parse('service_rank');
2025-04-22 15:28:27,817 [main] INFO  (Database#info():2872) -     parse('withdrawal_reason');
2025-04-22 15:28:27,849 [main] INFO  (Database#info():2872) - }
2025-04-22 15:28:27,849 [main] INFO  (Database#info():2872) -  
2025-04-22 15:28:27,858 [main] INFO  (DfRefreshMan#resolveProjectAutoDetect():105) - *Cannot auto-detect your refresh Eclipse proejct.
2025-04-22 15:28:27,858 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-04-22 15:28:27,858 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [$$AutoDetect$$] by http://localhost:8386/
2025-04-22 15:28:27,859 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-04-22 15:28:27,859 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-04-22 15:28:27,859 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-04-22 15:28:27,861 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s981ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2025-04-22 15:28:28,044 [main] INFO  (DfOutsideSqlTestTask#begin():77) - +------------------------------------------+
2025-04-22 15:28:28,044 [main] INFO  (DfOutsideSqlTestTask#begin():78) - |                                          |
2025-04-22 15:28:28,044 [main] INFO  (DfOutsideSqlTestTask#begin():79) - |              OutsideSqlTest              |
2025-04-22 15:28:28,044 [main] INFO  (DfOutsideSqlTestTask#begin():80) - |                                          |
2025-04-22 15:28:28,044 [main] INFO  (DfOutsideSqlTestTask#begin():81) - +------------------------------------------+
2025-04-22 15:28:28,050 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-04-22 15:28:28,050 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-04-22 15:28:28,050 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-04-22 15:28:28,050 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-04-22 15:28:28,058 [main] INFO  (DfSqlFileFireMan#fire():93) - Fired SQL: success=0, failure=0 (in 0 files)
2025-04-22 15:28:28,060 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s018ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 {Checked SQL}
_/_/_/_/_/_/_/_/_/_/ {OutsideSqlTest}
2025-04-22 15:28:28,244 [main] INFO  (DfSql2EntityTask#begin():106) - +------------------------------------------+
2025-04-22 15:28:28,244 [main] INFO  (DfSql2EntityTask#begin():107) - |                                          |
2025-04-22 15:28:28,244 [main] INFO  (DfSql2EntityTask#begin():108) - |                Sql2Entity                |
2025-04-22 15:28:28,244 [main] INFO  (DfSql2EntityTask#begin():109) - |                                          |
2025-04-22 15:28:28,244 [main] INFO  (DfSql2EntityTask#begin():110) - +------------------------------------------+
2025-04-22 15:28:28,250 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-04-22 15:28:28,250 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-04-22 15:28:28,250 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-04-22 15:28:28,250 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-04-22 15:28:28,254 [main] INFO  (DfSql2EntityTask#setupControlTemplate():177) - 
2025-04-22 15:28:28,254 [main] INFO  (DfSql2EntityTask#setupControlTemplate():178) - ...Using Java control: om/ControlSql2EntityJava.vm
2025-04-22 15:28:28,255 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-04-22 15:28:28,273 [main] INFO  (DfSqlFileFireMan#fire():93) - Fired SQL: success=0, failure=0 (in 0 files)
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#initControlContext():311) - 
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#initControlContext():312) - ...Preparing generation of customize-entities and parameter-beans
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#initControlContext():313) - * * * * * * * * * *
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#initControlContext():314) - * CustomizeEntity *
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#initControlContext():315) - * * * * * * * * * *
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#showParameterBean():932) - * * * * * * * * *
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#showParameterBean():933) - * ParameterBean *
2025-04-22 15:28:28,281 [main] INFO  (DfSql2EntityTask#showParameterBean():934) - * * * * * * * * *
2025-04-22 15:28:28,282 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlSql2EntityJava.vm", ctx);
2025-04-22 15:28:28,284 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-04-22 15:28:28,326 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 15:28:28,413 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-04-22 15:28:28,415 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-04-22 15:28:28,416 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-04-22 15:28:28,416 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-04-22 15:28:28,418 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-04-22 15:28:28,419 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-04-22 15:28:28,423 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-04-22 15:28:28,424 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-04-22 15:28:28,426 [main] INFO  (Database#doEnableSql2EntityOutputDirectory():1225) - ...Setting up sql2EntityOutputDirectory: ../src/main/java
2025-04-22 15:28:28,426 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldCustomizeClass() {
2025-04-22 15:28:28,428 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-04-22 15:28:28,429 [main] INFO  (Database#info():2872) - public void parseCustomizeEntity() {
2025-04-22 15:28:28,429 [main] INFO  (Database#info():2872) - }
2025-04-22 15:28:28,438 [main] INFO  (DfSql2EntityTask#showTargetSqlFileInformation():303) - 
/- - - - - - - - - - - - - - - - - - - - - - - -
Target SQL files: 0

- - - - - - - - - -/
2025-04-22 15:28:28,439 [main] INFO  (DfRefreshMan#resolveProjectAutoDetect():105) - *Cannot auto-detect your refresh Eclipse proejct.
2025-04-22 15:28:28,439 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-04-22 15:28:28,439 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [$$AutoDetect$$] by http://localhost:8386/
2025-04-22 15:28:28,440 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-04-22 15:28:28,440 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-04-22 15:28:28,440 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-04-22 15:28:28,442 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s200ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Sql2Entity}
2025-04-22 16:00:54,621 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-04-22 16:00:54,622 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-04-22 16:00:54,622 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-04-22 16:00:54,624 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-04-22 16:00:54,624 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-04-22 16:00:54,624 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-04-22 16:00:56,783 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-04-22 16:00:56,783 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-04-22 16:00:56,783 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-04-22 16:00:56,784 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-04-22 16:00:56,790 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-04-22 16:00:57,045 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.40
2025-04-22 16:00:57,045 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-04-22 16:00:57,050 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-04-22 16:00:57,050 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-04-22 16:00:57,050 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-04-22 16:00:57,051 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-04-22 16:00:57,051 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-04-22 16:00:57,051 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-04-22 16:00:57,055 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-04-22 16:00:57,055 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 16:00:57,055 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-04-22 16:00:57,072 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-04-22 16:00:57,078 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-04-22 16:00:57,082 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-04-22 16:00:57,087 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-04-22 16:00:57,092 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-04-22 16:00:57,100 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-04-22 16:00:57,107 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member drop foreign key FK_MEMBER_MEMBER_STATUS
2025-04-22 16:00:57,123 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-04-22 16:00:57,127 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-04-22 16:00:57,133 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-04-22 16:00:57,138 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-04-22 16:00:57,143 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-04-22 16:00:57,148 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-04-22 16:00:57,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-04-22 16:00:57,159 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-04-22 16:00:57,163 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-04-22 16:00:57,167 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-04-22 16:00:57,175 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-04-22 16:00:57,183 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-04-22 16:00:57,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-04-22 16:00:57,195 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-04-22 16:00:57,203 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-04-22 16:00:57,210 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member
2025-04-22 16:00:57,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-04-22 16:00:57,216 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-04-22 16:00:57,218 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-04-22 16:00:57,220 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-04-22 16:00:57,223 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-04-22 16:00:57,226 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-04-22 16:00:57,228 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-04-22 16:00:57,230 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-04-22 16:00:57,233 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-04-22 16:00:57,235 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-04-22 16:00:57,237 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-04-22 16:00:57,240 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-04-22 16:00:57,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-04-22 16:00:57,245 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-04-22 16:00:57,260 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-04-22 16:00:57,260 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-04-22 16:00:57,260 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-04-22 16:00:57,261 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-04-22 16:00:57,261 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-04-22 16:00:57,261 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-04-22 16:00:57,262 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-04-22 16:00:57,263 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-04-22 16:00:57,264 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-04-22 16:00:57,264 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-04-22 16:00:57,280 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-04-22 16:00:57,280 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-04-22 16:00:57,280 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-04-22 16:00:57,280 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-04-22 16:00:57,285 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-04-22 16:00:57,285 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-04-22 16:00:57,285 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-04-22 16:00:57,285 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-04-22 16:00:57,286 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-04-22 16:00:57,288 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-04-22 16:00:57,288 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-04-22 16:00:57,288 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-04-22 16:00:57,288 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-04-22 16:00:57,288 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-04-22 16:00:57,291 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-04-22 16:00:57,297 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-04-22 16:00:57,303 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-04-22 16:00:57,307 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-04-22 16:00:57,311 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-04-22 16:00:57,316 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-04-22 16:00:57,321 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-04-22 16:00:57,328 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-04-22 16:00:57,332 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-04-22 16:00:57,336 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-04-22 16:00:57,340 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-04-22 16:00:57,343 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-04-22 16:00:57,347 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-04-22 16:00:57,351 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-04-22 16:00:57,356 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-04-22 16:00:57,360 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-04-22 16:00:57,371 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-04-22 16:00:57,380 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-04-22 16:00:57,391 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-04-22 16:00:57,400 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-04-22 16:00:57,410 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-04-22 16:00:57,420 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-04-22 16:00:57,430 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-04-22 16:00:57,438 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-04-22 16:00:57,447 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-04-22 16:00:57,456 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-04-22 16:00:57,468 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-04-22 16:00:57,482 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-04-22 16:00:57,492 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-04-22 16:00:57,504 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-04-22 16:00:57,517 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-04-22 16:00:57,527 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-04-22 16:00:57,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-04-22 16:00:57,551 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-04-22 16:00:57,555 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-04-22 16:00:57,560 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-04-22 16:00:57,567 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-04-22 16:00:57,574 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-04-22 16:00:57,580 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-04-22 16:00:57,584 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-04-22 16:00:57,590 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-04-22 16:00:57,590 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema.sql
2025-04-22 16:00:57,591 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-04-22 16:00:57,591 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 3 files)
2025-04-22 16:00:57,591 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-04-22 16:00:57,605 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-04-22 16:00:57,605 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-04-22 16:00:57,605 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-04-22 16:00:57,605 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-04-22 16:00:57,605 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-04-22 16:00:57,605 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-04-22 16:00:57,613 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-04-22 16:00:57,613 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/common/xls/10-master.xls)
2025-04-22 16:00:57,613 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-04-22 16:00:57,687 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-04-22 16:00:57,687 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 16:00:57,687 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-04-22 16:00:57,701 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-04-22 16:00:57,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-04-22 16:00:57,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-04-22 16:00:57,713 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-04-22 16:00:57,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-04-22 16:00:57,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-04-22 16:00:57,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-04-22 16:00:57,714 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-04-22 16:00:57,716 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-04-22 16:00:57,716 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.3, 1, platinum rank, 1}
2025-04-22 16:00:57,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.2, 1, gold rank, 2}
2025-04-22 16:00:57,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.74, 1, silver rank, 3}
2025-04-22 16:00:57,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2, 1, bronze rank, 4}
2025-04-22 16:00:57,717 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.1, 0, plastic rank, 5}
2025-04-22 16:00:57,719 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-04-22 16:00:57,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-04-22 16:00:57,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-04-22 16:00:57,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-04-22 16:00:57,720 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-04-22 16:00:57,722 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-04-22 16:00:57,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-04-22 16:00:57,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-04-22 16:00:57,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-04-22 16:00:57,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-04-22 16:00:57,722 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-04-22 16:00:57,724 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-04-22 16:00:57,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-04-22 16:00:57,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-04-22 16:00:57,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-04-22 16:00:57,726 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-04-22 16:00:57,728 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-04-22 16:00:57,728 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/ut/xls/20-member.xls)
2025-04-22 16:00:57,729 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-04-22 16:00:57,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{1, Stojkovic, Pixy, FML, 2007/12/01 11:01:10, 1965/03/03, 2025-04-22 16:00:57.75, foo, 2025-04-22 16:00:57.75, foo, 0}
2025-04-22 16:00:57,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966/09/15, 2025-04-22 16:00:57.754, foo, 2025-04-22 16:00:57.754, foo, 0}
2025-04-22 16:00:57,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005/10/03 13:03:30, null, 2025-04-22 16:00:57.754, foo, 2025-04-22 16:00:57.754, foo, 0}
2025-04-22 16:00:57,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{4, Stankovic, Stanko, FML, 2006/09/04 14:04:40, 1978/09/11, 2025-04-22 16:00:57.754, foo, 2025-04-22 16:00:57.754, foo, 0}
2025-04-22 16:00:57,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{5, Milosevic, Milose, FML, 2007/08/05 15:05:50, null, 2025-04-22 16:00:57.755, foo, 2025-04-22 16:00:57.755, foo, 0}
2025-04-22 16:00:57,755 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006/07/06 16:06:40, 1969/02/20, 2025-04-22 16:00:57.755, foo, 2025-04-22 16:00:57.755, foo, 0}
2025-04-22 16:00:57,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{7, アカギ, Akagi, FML, 2005/06/07 17:07:30, null, 2025-04-22 16:00:57.756, foo, 2025-04-22 16:00:57.756, foo, 0}
2025-04-22 16:00:57,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{8, Kezman, RedCard, FML, 2006/05/08 18:08:20, null, 2025-04-22 16:00:57.756, foo, 2025-04-22 16:00:57.756, foo, 0}
2025-04-22 16:00:57,756 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007/12/31 00:00:00, 1967/02/20, 2025-04-22 16:00:57.756, foo, 2025-04-22 16:00:57.756, foo, 0}
2025-04-22 16:00:57,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 2025-04-22 16:00:57.757, foo, 2025-04-22 16:00:57.757, foo, 0}
2025-04-22 16:00:57,757 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{11, Boban, Boban, FML, 2007/12/01 11:01:10, 1968/10/08, 2025-04-22 16:00:57.757, foo, 2025-04-22 16:00:57.757, foo, 0}
2025-04-22 16:00:57,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{12, Suker, Suker, PRV, null, 1968/01/01, 2025-04-22 16:00:57.758, foo, 2025-04-22 16:00:57.758, foo, 0}
2025-04-22 16:00:57,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{13, Jarni, Jarni, WDL, 2005/10/03 13:03:30, 1968/10/26, 2025-04-22 16:00:57.758, foo, 2025-04-22 16:00:57.758, foo, 0}
2025-04-22 16:00:57,758 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{14, Boksic, Boksic, FML, 2006/09/04 14:04:40, 1970/01/21, 2025-04-22 16:00:57.758, foo, 2025-04-22 16:00:57.758, foo, 0}
2025-04-22 16:00:57,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004/08/05 15:05:50, 1969/01/12, 2025-04-22 16:00:57.759, foo, 2025-04-22 16:00:57.759, foo, 0}
2025-04-22 16:00:57,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006/07/06 16:06:40, null, 2025-04-22 16:00:57.759, foo, 2025-04-22 16:00:57.759, foo, 0}
2025-04-22 16:00:57,759 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005/06/07 17:07:30, null, 2025-04-22 16:00:57.759, foo, 2025-04-22 16:00:57.759, foo, 0}
2025-04-22 16:00:57,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{18, Jovanovic, Jovano, FML, 2006/05/08 18:08:20, 1981/04/18, 2025-04-22 16:00:57.76, foo, 2025-04-22 16:00:57.76, foo, 0}
2025-04-22 16:00:57,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{19, Milko, Milko, FML, 2005/12/31 12:34:56, 1974/09/10, 2025-04-22 16:00:57.76, foo, 2025-04-22 16:00:57.76, foo, 0}
2025-04-22 16:00:57,760 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001/12/31 23:59:59, null, 2025-04-22 16:00:57.76, foo, 2025-04-22 16:00:57.76, foo, 0}
2025-04-22 16:00:57,766 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER
2025-04-22 16:00:57,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{1, 1, 2007/03/24, 2015/12/31, Nagara, 4, 2025-04-22 16:00:57.767, foo, 2025-04-22 16:00:57.767, foo, 0}
2025-04-22 16:00:57,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{2, 1, 1949/01/01, 1997/03/31, New York, 1, 2025-04-22 16:00:57.767, foo, 2025-04-22 16:00:57.767, foo, 0}
2025-04-22 16:00:57,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{3, 1, 1997/04/01, 2000/09/30, Los Angels, 1, 2025-04-22 16:00:57.768, foo, 2025-04-22 16:00:57.768, foo, 0}
2025-04-22 16:00:57,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{4, 1, 2000/10/01, 2003/08/31, New York, 1, 2025-04-22 16:00:57.768, foo, 2025-04-22 16:00:57.768, foo, 0}
2025-04-22 16:00:57,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{5, 1, 2003/09/01, 2004/12/22, San Francisco Powell, 1, 2025-04-22 16:00:57.769, foo, 2025-04-22 16:00:57.769, foo, 0}
2025-04-22 16:00:57,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{6, 1, 2004/12/23, 2006/03/23, San Francisco Daly City, 1, 2025-04-22 16:00:57.769, foo, 2025-04-22 16:00:57.769, foo, 0}
2025-04-22 16:00:57,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{7, 1, 2016/01/01, 9999/12/31, Victoria, 2, 2025-04-22 16:00:57.77, foo, 2025-04-22 16:00:57.77, foo, 0}
2025-04-22 16:00:57,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{8, 2, 2004/12/24, 9999/12/31, Ichihara, 4, 2025-04-22 16:00:57.771, foo, 2025-04-22 16:00:57.771, foo, 0}
2025-04-22 16:00:57,771 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{9, 3, 2004/12/24, 2007/03/23, Mobara, 4, 2025-04-22 16:00:57.771, foo, 2025-04-22 16:00:57.771, foo, 0}
2025-04-22 16:00:57,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{10, 4, 2002/11/01, 9999/12/31, Sousa, 4, 2025-04-22 16:00:57.772, foo, 2025-04-22 16:00:57.772, foo, 0}
2025-04-22 16:00:57,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{11, 6, 2002/11/01, 9999/12/31, Yokoshiba, 4, 2025-04-22 16:00:57.772, foo, 2025-04-22 16:00:57.772, foo, 0}
2025-04-22 16:00:57,772 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{12, 9, 2010/11/01, 9999/12/31, Tateyama, 4, 2025-04-22 16:00:57.772, foo, 2025-04-22 16:00:57.772, foo, 0}
2025-04-22 16:00:57,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{13, 10, 1970/01/01, 9999/12/31, Shoku, 3, 2025-04-22 16:00:57.773, foo, 2025-04-22 16:00:57.773, foo, 0}
2025-04-22 16:00:57,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{14, 12, 2000/11/01, 2001/11/01, Oohara, 4, 2025-04-22 16:00:57.773, foo, 2025-04-22 16:00:57.773, foo, 0}
2025-04-22 16:00:57,773 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{15, 15, 2002/11/01, 2006/10/30, MinamiBousou, 4, 2025-04-22 16:00:57.773, foo, 2025-04-22 16:00:57.773, foo, 0}
2025-04-22 16:00:57,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{16, 15, 2007/11/01, 9999/12/31, Tomisato, 4, 2025-04-22 16:00:57.774, foo, 2025-04-22 16:00:57.774, foo, 0}
2025-04-22 16:00:57,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{17, 18, 2001/03/21, 2007/11/21, Katsuura, 4, 2025-04-22 16:00:57.774, foo, 2025-04-22 16:00:57.774, foo, 0}
2025-04-22 16:00:57,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{18, 18, 2007/11/22, 9999/12/31, Kamogawa, 4, 2025-04-22 16:00:57.775, foo, 2025-04-22 16:00:57.775, foo, 0}
2025-04-22 16:00:57,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{19, 19, 2000/11/01, 9999/12/31, Yotsukaido, 4, 2025-04-22 16:00:57.775, foo, 2025-04-22 16:00:57.775, foo, 0}
2025-04-22 16:00:57,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{20, 20, 1970/01/01, 9999/12/31, Go, 3, 2025-04-22 16:00:57.775, foo, 2025-04-22 16:00:57.775, foo, 0}
2025-04-22 16:00:57,780 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_ADDRESS
2025-04-22 16:00:57,780 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{1, 3, 2006/12/24 23:59:59, 0, FML}
2025-04-22 16:00:57,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{2, 6, 2007/11/11 16:16:16, 0, FML}
2025-04-22 16:00:57,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{3, 1, 2006/12/23 22:56:29, 0, FML}
2025-04-22 16:00:57,781 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{4, 6, 2007/11/01 02:13:00, 0, FML}
2025-04-22 16:00:57,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{5, 7, 2006/05/24 23:12:59, 0, FML}
2025-04-22 16:00:57,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{6, 6, 2005/11/11 16:32:01, 0, PRV}
2025-04-22 16:00:57,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{7, 6, 2006/01/28 23:59:59, 1, FML}
2025-04-22 16:00:57,782 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{8, 6, 2007/11/09 16:23:00, 0, FML}
2025-04-22 16:00:57,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{9, 8, 2006/12/22 23:59:59, 0, FML}
2025-04-22 16:00:57,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{10, 6, 2007/11/11 09:01:00, 0, FML}
2025-04-22 16:00:57,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{11, 1, 2006/12/23 23:59:59, 0, FML}
2025-04-22 16:00:57,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{12, 9, 2007/11/15 12:43:00, 0, FML}
2025-04-22 16:00:57,783 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{13, 10, 2006/12/24 23:59:59, 0, FML}
2025-04-22 16:00:57,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{14, 6, 2007/04/01 16:23:01, 0, FML}
2025-04-22 16:00:57,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{15, 7, 2006/12/24 23:59:20, 1, FML}
2025-04-22 16:00:57,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{16, 6, 2007/05/01 12:23:02, 0, FML}
2025-04-22 16:00:57,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{17, 7, 2006/12/24 23:59:21, 0, FML}
2025-04-22 16:00:57,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{18, 6, 2007/06/11 17:23:03, 0, FML}
2025-04-22 16:00:57,784 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{19, 4, 2006/12/24 23:59:22, 0, FML}
2025-04-22 16:00:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{20, 3, 2007/11/01 16:12:04, 0, FML}
2025-04-22 16:00:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{21, 11, 2006/12/24 23:59:23, 0, FML}
2025-04-22 16:00:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{22, 1, 2007/11/01 16:23:05, 0, PRV}
2025-04-22 16:00:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{23, 9, 2006/12/24 23:59:24, 1, FML}
2025-04-22 16:00:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{24, 8, 2007/11/01 16:23:06, 0, FML}
2025-04-22 16:00:57,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{25, 7, 2007/12/24 11:59:25, 1, FML}
2025-04-22 16:00:57,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{26, 6, 2007/06/21 01:23:57, 0, FML}
2025-04-22 16:00:57,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{27, 5, 2006/12/24 23:59:26, 0, FML}
2025-04-22 16:00:57,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{28, 3, 2007/11/01 16:23:08, 0, FML}
2025-04-22 16:00:57,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{29, 3, 2006/12/24 23:59:27, 0, FML}
2025-04-22 16:00:57,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{30, 10, 2007/11/01 16:23:09, 0, FML}
2025-04-22 16:00:57,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{31, 15, 2006/07/24 23:59:28, 0, FML}
2025-04-22 16:00:57,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{32, 14, 2007/11/01 17:23:10, 0, FML}
2025-04-22 16:00:57,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{33, 15, 2007/11/01 16:23:10, 0, FML}
2025-04-22 16:00:57,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{34, 18, 2006/07/24 23:59:29, 0, FML}
2025-04-22 16:00:57,788 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{35, 3, 2007/11/01 17:23:11, 0, PRV}
2025-04-22 16:00:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{36, 5, 2007/11/01 16:23:11, 1, FML}
2025-04-22 16:00:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{37, 11, 2006/07/24 23:59:30, 0, FML}
2025-04-22 16:00:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{38, 20, 2007/11/01 17:23:12, 1, FML}
2025-04-22 16:00:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{39, 19, 2007/11/01 16:23:12, 0, FML}
2025-04-22 16:00:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{40, 4, 2006/07/24 23:59:31, 0, FML}
2025-04-22 16:00:57,789 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{41, 4, 2007/11/01 17:23:13, 0, FML}
2025-04-22 16:00:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{42, 4, 2007/11/01 16:23:13, 0, FML}
2025-04-22 16:00:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{43, 4, 2006/07/24 23:52:32, 0, FML}
2025-04-22 16:00:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{44, 4, 2007/11/01 11:23:14, 0, FML}
2025-04-22 16:00:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{45, 4, 2007/11/21 06:23:14, 0, FML}
2025-04-22 16:00:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{46, 12, 2006/07/24 23:52:33, 0, PRV}
2025-04-22 16:00:57,790 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{47, 13, 2007/11/01 11:23:15, 1, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{48, 14, 2007/11/21 06:23:15, 0, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{49, 17, 2006/07/24 23:52:34, 1, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{50, 18, 2007/11/01 11:23:16, 0, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{51, 16, 2007/11/21 06:23:16, 0, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{52, 4, 2006/07/24 23:52:35, 0, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{53, 5, 2007/11/01 11:23:17, 0, FML}
2025-04-22 16:00:57,791 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{54, 5, 2007/11/21 06:23:17, 0, FML}
2025-04-22 16:00:57,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{55, 11, 2006/07/24 23:52:36, 0, FML}
2025-04-22 16:00:57,792 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{56, 12, 2007/11/01 11:23:18, 0, FML}
2025-04-22 16:00:57,803 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 56 rows are loaded to MEMBER_LOGIN
2025-04-22 16:00:57,803 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 2025-04-22 16:00:57.803, foo, 2025-04-22 16:00:57.803, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 2025-04-22 16:00:57.803, foo, 2025-04-22 16:00:57.803, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,804 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 2025-04-22 16:00:57.804, foo, 2025-04-22 16:00:57.804, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 2025-04-22 16:00:57.807, foo, 2025-04-22 16:00:57.807, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 2025-04-22 16:00:57.808, foo, 2025-04-22 16:00:57.808, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 2025-04-22 16:00:57.808, foo, 2025-04-22 16:00:57.808, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 2025-04-22 16:00:57.808, foo, 2025-04-22 16:00:57.808, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 2025-04-22 16:00:57.808, foo, 2025-04-22 16:00:57.808, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 2025-04-22 16:00:57.808, foo, 2025-04-22 16:00:57.808, foo, 0}
2025-04-22 16:00:57,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 2025-04-22 16:00:57.808, foo, 2025-04-22 16:00:57.808, foo, 0}
2025-04-22 16:00:57,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 2025-04-22 16:00:57.809, foo, 2025-04-22 16:00:57.809, foo, 0}
2025-04-22 16:00:57,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 2025-04-22 16:00:57.809, foo, 2025-04-22 16:00:57.809, foo, 0}
2025-04-22 16:00:57,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 2025-04-22 16:00:57.809, foo, 2025-04-22 16:00:57.809, foo, 0}
2025-04-22 16:00:57,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 2025-04-22 16:00:57.809, foo, 2025-04-22 16:00:57.809, foo, 0}
2025-04-22 16:00:57,813 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SECURITY
2025-04-22 16:00:57,813 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{1, 1234, PLT, 2025-04-22 16:00:57.813, foo, 2025-04-22 16:00:57.813, foo, 0}
2025-04-22 16:00:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{2, 2345, GLD, 2025-04-22 16:00:57.814, foo, 2025-04-22 16:00:57.814, foo, 0}
2025-04-22 16:00:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{3, 3456, GLD, 2025-04-22 16:00:57.814, foo, 2025-04-22 16:00:57.814, foo, 0}
2025-04-22 16:00:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{4, 875, BRZ, 2025-04-22 16:00:57.814, foo, 2025-04-22 16:00:57.814, foo, 0}
2025-04-22 16:00:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{5, 1111, BRZ, 2025-04-22 16:00:57.814, foo, 2025-04-22 16:00:57.814, foo, 0}
2025-04-22 16:00:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{6, 5422, SIL, 2025-04-22 16:00:57.814, foo, 2025-04-22 16:00:57.814, foo, 0}
2025-04-22 16:00:57,814 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{7, 24678, SIL, 2025-04-22 16:00:57.814, foo, 2025-04-22 16:00:57.814, foo, 0}
2025-04-22 16:00:57,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{8, 234, SIL, 2025-04-22 16:00:57.817, foo, 2025-04-22 16:00:57.817, foo, 0}
2025-04-22 16:00:57,817 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{9, 3, SIL, 2025-04-22 16:00:57.817, foo, 2025-04-22 16:00:57.817, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{10, 98765, PLT, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{11, 34, GLD, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{12, 532, PLT, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{13, 23678, GLD, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{14, 432, GLD, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{15, 543, BRZ, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{16, 23545, PLT, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{17, 2345, GLD, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{18, 8763, SIL, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{19, 34567, SIL, 2025-04-22 16:00:57.818, foo, 2025-04-22 16:00:57.818, foo, 0}
2025-04-22 16:00:57,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{20, 43, GLD, 2025-04-22 16:00:57.819, foo, 2025-04-22 16:00:57.819, foo, 0}
2025-04-22 16:00:57,823 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SERVICE
2025-04-22 16:00:57,823 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006/12/24 23:59:59.123, 2025-04-22 16:00:57.823, foo, 2025-04-22 16:00:57.823, foo}
2025-04-22 16:00:57,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007/11/11 16:00:00.456, 2025-04-22 16:00:57.824, foo, 2025-04-22 16:00:57.824, foo}
2025-04-22 16:00:57,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006/12/24 05:52:29.789, 2025-04-22 16:00:57.824, foo, 2025-04-22 16:00:57.824, foo}
2025-04-22 16:00:57,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007/11/13 16:00:00.456, 2025-04-22 16:00:57.824, foo, 2025-04-22 16:00:57.824, foo}
2025-04-22 16:00:57,826 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2025-04-22 16:00:57,826 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():131) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-04-22 16:00:57,826 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():132) - writeData(playsql/data/ut/xls/30-product.xls)
2025-04-22 16:00:57,826 [main] INFO  (DfXlsDataHandlingWriter#writeSeveralData():133) - = = = = = = =/
2025-04-22 16:00:57,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 2025-04-22 16:00:57.84, foo, 2025-04-22 16:00:57.84, foo, 0}
2025-04-22 16:00:57,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 2025-04-22 16:00:57.841, foo, 2025-04-22 16:00:57.841, foo, 0}
2025-04-22 16:00:57,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 2025-04-22 16:00:57.841, foo, 2025-04-22 16:00:57.841, foo, 0}
2025-04-22 16:00:57,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 2025-04-22 16:00:57.841, foo, 2025-04-22 16:00:57.841, foo, 0}
2025-04-22 16:00:57,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 2025-04-22 16:00:57.841, foo, 2025-04-22 16:00:57.841, foo, 0}
2025-04-22 16:00:57,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 2025-04-22 16:00:57.841, foo, 2025-04-22 16:00:57.841, foo, 0}
2025-04-22 16:00:57,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 2025-04-22 16:00:57.841, foo, 2025-04-22 16:00:57.841, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,842 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 2025-04-22 16:00:57.842, foo, 2025-04-22 16:00:57.842, foo, 0}
2025-04-22 16:00:57,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 2025-04-22 16:00:57.843, foo, 2025-04-22 16:00:57.843, foo, 0}
2025-04-22 16:00:57,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 2025-04-22 16:00:57.843, foo, 2025-04-22 16:00:57.843, foo, 0}
2025-04-22 16:00:57,843 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 2025-04-22 16:00:57.843, foo, 2025-04-22 16:00:57.843, foo, 0}
2025-04-22 16:00:57,847 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to PRODUCT
2025-04-22 16:00:57,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{1, 5, 3, 2006/12/24 23:59:59, 1, 1800, 1, 2025-04-22 16:00:57.848, foo, 2025-04-22 16:00:57.848, foo, 0}
2025-04-22 16:00:57,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{2, 15, 7, 2007/11/11 16:16:16, 1, 1700, 1, 2025-04-22 16:00:57.848, foo, 2025-04-22 16:00:57.848, foo, 0}
2025-04-22 16:00:57,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{3, 13, 3, 2006/12/23 22:56:29.235, 1, 1800, 1, 2025-04-22 16:00:57.848, foo, 2025-04-22 16:00:57.848, foo, 0}
2025-04-22 16:00:57,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{4, 2, 5, 2007/11/01 02:13:00, 2, 1700, 1, 2025-04-22 16:00:57.848, foo, 2025-04-22 16:00:57.848, foo, 0}
2025-04-22 16:00:57,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{5, 9, 11, 2008/01/04 23:12:59, 5, 1800, 1, 2025-04-22 16:00:57.848, foo, 2025-04-22 16:00:57.848, foo, 0}
2025-04-22 16:00:57,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{6, 20, 2, 2002/01/01 16:32:01, 1, 2000, 1, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{7, 19, 9, 2006/01/28 23:59:59.999, 1, 1000, 0, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{8, 4, 7, 2007/11/09 16:23:00, 1, 1535, 1, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{9, 4, 10, 2006/12/22 23:59:59, 20, 1700, 1, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{10, 2, 10, 2007/11/01 02:13:00.345, 1, 1700, 0, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,849 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{11, 5, 2, 2007/11/09 16:23:01, 1, 1800, 1, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{12, 15, 2, 2006/12/22 23:59:12, 1, 1700, 1, 2025-04-22 16:00:57.849, foo, 2025-04-22 16:00:57.849, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{13, 13, 8, 2007/11/01 02:13:00.346, 1, 1800, 1, 2025-04-22 16:00:57.85, foo, 2025-04-22 16:00:57.85, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{14, 2, 4, 2007/11/09 16:23:02, 2, 1700, 1, 2025-04-22 16:00:57.85, foo, 2025-04-22 16:00:57.85, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{15, 9, 11, 2006/12/22 23:59:32, 5, 1800, 1, 2025-04-22 16:00:57.85, foo, 2025-04-22 16:00:57.85, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{16, 20, 1, 2007/11/01 02:13:00.347, 1, 2000, 1, 2025-04-22 16:00:57.85, foo, 2025-04-22 16:00:57.85, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{17, 19, 11, 2006/12/22 23:59:33, 2, 1000, 0, 2025-04-22 16:00:57.85, foo, 2025-04-22 16:00:57.85, foo, 0}
2025-04-22 16:00:57,850 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{18, 4, 10, 2007/11/01 02:13:00.348, 1, 1535, 1, 2025-04-22 16:00:57.85, foo, 2025-04-22 16:00:57.85, foo, 0}
2025-04-22 16:00:57,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{19, 4, 11, 2007/11/01 02:13:00.348, 4, 1700, 1, 2025-04-22 16:00:57.851, foo, 2025-04-22 16:00:57.851, foo, 0}
2025-04-22 16:00:57,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{20, 2, 11, 2006/12/22 23:59:35, 1, 1700, 0, 2025-04-22 16:00:57.851, foo, 2025-04-22 16:00:57.851, foo, 0}
2025-04-22 16:00:57,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{21, 2, 15, 2006/12/22 23:59:35, 1, 400000, 0, 2025-04-22 16:00:57.851, foo, 2025-04-22 16:00:57.851, foo, 0}
2025-04-22 16:00:57,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{22, 3, 6, 2007/11/01 02:13:00.350, 4, 1800, 1, 2025-04-22 16:00:57.851, foo, 2025-04-22 16:00:57.851, foo, 0}
2025-04-22 16:00:57,851 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{23, 15, 7, 2006/12/22 23:59:36, 1, 1700, 1, 2025-04-22 16:00:57.851, foo, 2025-04-22 16:00:57.851, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{24, 13, 3, 2007/09/11 12:13:00.351, 1, 1800, 1, 2025-04-22 16:00:57.851, foo, 2025-04-22 16:00:57.851, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{25, 16, 2, 2006/12/22 23:59:37, 2, 1700, 1, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{26, 3, 4, 2005/12/21 12:13:00.352, 1, 1800, 1, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{27, 2, 8, 2006/12/22 23:59:38, 1, 2000, 1, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{28, 6, 17, 2007/11/01 02:13:00.353, 2, 600, 0, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{29, 4, 4, 2006/12/22 23:59:39, 1, 1535, 1, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{30, 4, 3, 2007/11/01 02:13:00.354, 4, 1700, 1, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,852 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{31, 4, 10, 2006/12/22 23:59:40, 1, 1700, 0, 2025-04-22 16:00:57.852, foo, 2025-04-22 16:00:57.852, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{32, 13, 3, 2006/12/28 12:13:10.355, 1, 1800, 1, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{33, 16, 2, 2006/12/22 23:59:41, 2, 1700, 1, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{34, 3, 4, 2007/05/21 12:13:00.356, 1, 1800, 1, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{35, 2, 8, 2006/12/12 23:59:42, 1, 2000, 1, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{36, 6, 3, 2007/05/01 02:13:00.357, 2, 1000, 0, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{37, 4, 4, 2006/12/12 23:59:43, 1, 1535, 1, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,853 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{38, 4, 3, 2007/05/01 02:03:00.358, 4, 1700, 1, 2025-04-22 16:00:57.853, foo, 2025-04-22 16:00:57.853, foo, 0}
2025-04-22 16:00:57,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{39, 4, 10, 2006/12/12 23:59:44, 1, 1700, 0, 2025-04-22 16:00:57.854, foo, 2025-04-22 16:00:57.854, foo, 0}
2025-04-22 16:00:57,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{40, 4, 10, 2007/05/01 12:13:00.359, 1, 1700, 0, 2025-04-22 16:00:57.854, foo, 2025-04-22 16:00:57.854, foo, 0}
2025-04-22 16:00:57,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{41, 4, 11, 2007/11/01 02:13:01.354, 4, 1700, 1, 2025-04-22 16:00:57.854, foo, 2025-04-22 16:00:57.854, foo, 0}
2025-04-22 16:00:57,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{42, 10, 16, 2006/12/22 23:59:40, 1, 2800000, 1, 2025-04-22 16:00:57.854, foo, 2025-04-22 16:00:57.854, foo, 0}
2025-04-22 16:00:57,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{43, 13, 17, 2006/12/28 12:13:10.355, 1, 1800, 1, 2025-04-22 16:00:57.854, foo, 2025-04-22 16:00:57.854, foo, 0}
2025-04-22 16:00:57,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{44, 16, 14, 2006/12/22 23:59:41, 2, 1700, 1, 2025-04-22 16:00:57.854, foo, 2025-04-22 16:00:57.854, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{45, 3, 18, 2007/05/21 12:13:00.356, 1, 1800, 1, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{46, 2, 7, 2006/12/12 23:59:42, 1, 2000, 1, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{47, 6, 14, 2007/05/01 02:13:00.357, 2, 1000, 0, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{48, 16, 12, 2006/12/12 23:59:43, 1, 100000, 1, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{49, 4, 20, 2007/05/01 02:03:00.358, 4, 1700, 1, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{50, 4, 19, 2006/12/12 23:59:44, 1, 1700, 0, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,855 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{51, 4, 11, 2007/11/21 02:13:00.354, 4, 1700, 1, 2025-04-22 16:00:57.855, foo, 2025-04-22 16:00:57.855, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{52, 20, 17, 2006/12/23 23:59:40, 1, 400, 0, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{53, 13, 16, 2007/12/28 12:13:10.355, 1, 600000, 1, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{54, 16, 14, 2006/02/22 23:59:41, 2, 1700, 1, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{55, 3, 3, 2007/07/21 12:13:00.356, 1, 1800, 1, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{56, 2, 8, 2006/12/22 23:59:42, 1, 2000, 1, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{57, 6, 19, 2007/02/01 02:13:00.357, 2, 1000, 0, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,856 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{58, 2, 12, 2006/12/12 23:59:43, 1, 4000000, 1, 2025-04-22 16:00:57.856, foo, 2025-04-22 16:00:57.856, foo, 0}
2025-04-22 16:00:57,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{59, 4, 18, 2007/05/01 02:03:00.358, 1, 380, 1, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{60, 4, 20, 2006/12/12 23:59:44, 2, 680, 0, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,857 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 2025-04-22 16:00:57.857, foo, 2025-04-22 16:00:57.857, foo, 0}
2025-04-22 16:00:57,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 2025-04-22 16:00:57.858, foo, 2025-04-22 16:00:57.858, foo, 0}
2025-04-22 16:00:57,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 2025-04-22 16:00:57.858, foo, 2025-04-22 16:00:57.858, foo, 0}
2025-04-22 16:00:57,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 2025-04-22 16:00:57.858, foo, 2025-04-22 16:00:57.858, foo, 0}
2025-04-22 16:00:57,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 2025-04-22 16:00:57.858, foo, 2025-04-22 16:00:57.858, foo, 0}
2025-04-22 16:00:57,858 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 2025-04-22 16:00:57.858, foo, 2025-04-22 16:00:57.858, foo, 0}
2025-04-22 16:00:57,872 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 70 rows are loaded to PURCHASE
2025-04-22 16:00:57,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{1, 1, 1800, 2006/12/25 23:59:59, BAK, 2025-04-22 16:00:57.872, foo, 2025-04-22 16:00:57.872, foo}
2025-04-22 16:00:57,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{2, 2, 1700, 2007/11/13 16:16:16, BAK, 2025-04-22 16:00:57.873, foo, 2025-04-22 16:00:57.873, foo}
2025-04-22 16:00:57,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{3, 3, 900, 2006/12/23 23:56:29, CRC, 2025-04-22 16:00:57.873, foo, 2025-04-22 16:00:57.873, foo}
2025-04-22 16:00:57,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{4, 3, 900, 2006/12/23 23:56:30, HAN, 2025-04-22 16:00:57.873, foo, 2025-04-22 16:00:57.873, foo}
2025-04-22 16:00:57,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{5, 4, 1700, 2007/12/01 02:13:00, HAN, 2025-04-22 16:00:57.873, foo, 2025-04-22 16:00:57.873, foo}
2025-04-22 16:00:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008/04/04 23:12:59, HAN, 2025-04-22 16:00:57.873, foo, 2025-04-22 16:00:57.873, foo}
2025-04-22 16:00:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008/05/04 23:12:59, CRC, 2025-04-22 16:00:57.874, foo, 2025-04-22 16:00:57.874, foo}
2025-04-22 16:00:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{8, 6, 1000, 2002/01/01 16:32:01, CRC, 2025-04-22 16:00:57.874, foo, 2025-04-22 16:00:57.874, foo}
2025-04-22 16:00:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{9, 6, 400.8, 2002/01/01 16:32:01, CRC, 2025-04-22 16:00:57.874, foo, 2025-04-22 16:00:57.874, foo}
2025-04-22 16:00:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{10, 6, 599.2, 2002/01/01 16:32:01, HAN, 2025-04-22 16:00:57.874, foo, 2025-04-22 16:00:57.874, foo}
2025-04-22 16:00:57,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{11, 7, 300, 2006/01/28 23:59:59, CRC, 2025-04-22 16:00:57.874, foo, 2025-04-22 16:00:57.874, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{12, 8, 535.5, 2007/11/09 16:23:00, BAK, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{13, 8, 999.5, 2014/11/09 16:23:05, BAK, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{14, 9, 1700, 2006/12/22 23:59:59, BAK, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{15, 11, 1799.2, 2014/11/09 16:23:01, CRC, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{16, 11, 0.8, 2014/11/09 16:23:01, HAN, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{17, 12, 1690, 2011/12/22 23:59:12, HAN, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{18, 12, 10, 2011/12/22 23:59:12, CRC, 2025-04-22 16:00:57.875, foo, 2025-04-22 16:00:57.875, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{19, 13, 1800.7, 2007/11/01 02:13:00, CRC, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{20, 14, 1700, 2008/11/09 16:23:02, BAK, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{21, 15, 300, 2006/12/22 23:59:32, HAN, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{22, 15, 600, 2007/12/22 23:59:32, BAK, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{23, 15, 900, 2008/12/22 23:59:32, HAN, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{24, 16, 2000, 2012/11/01 02:13:00, BAK, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{25, 18, 1535, 2013/11/01 02:13:00, HAN, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{26, 19, 1700, 2007/11/01 02:13:00, HAN, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{27, 20, 5, 2006/12/22 23:59:35, HAN, 2025-04-22 16:00:57.876, foo, 2025-04-22 16:00:57.876, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{28, 21, 399999, 2006/12/22 23:59:35, BAK, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{29, 22, 1800, 2007/11/01 02:13:00, BAK, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{30, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{31, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{32, 23, 1700, 2006/12/22 23:59:36, HAN, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{33, 24, 1000, 2012/09/11 12:13:00, BAK, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{34, 24, 800, 2015/09/11 12:13:00, BAK, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{35, 25, 1700, 2013/12/22 23:59:37, BAK, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{36, 26, 1800, 2005/12/21 12:13:00, BAK, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{37, 27, 2000, 2006/12/22 23:59:38, HAN, 2025-04-22 16:00:57.877, foo, 2025-04-22 16:00:57.877, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{38, 28, 600, 2007/11/01 02:13:00, BAK, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{39, 29, 1535, 2006/12/22 23:59:39, BAK, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{40, 30, 100, 2010/09/01 02:13:00, HAN, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{41, 30, 200, 2011/10/31 02:13:00, CRC, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012/11/01 02:13:00, CRC, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013/12/01 02:13:00, HAN, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{44, 30, 300, 2014/09/01 02:13:00, HAN, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{45, 30, 700, 2014/10/01 02:13:00, HAN, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006/12/22 23:59:40, HAN, 2025-04-22 16:00:57.878, foo, 2025-04-22 16:00:57.878, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{47, 32, 1800, 2009/12/28 12:13:10, HAN, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{48, 33, 1700, 2006/12/22 23:59:41, CRC, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{49, 34, 1800, 2007/05/21 12:13:00, BAK, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{50, 35, 2000, 2006/12/12 23:59:42, CRC, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{51, 36, 300.1, 2012/05/01 02:13:00, CRC, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{52, 36, 300.8, 2013/05/01 02:13:00, HAN, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014/05/01 02:13:00, HAN, 2025-04-22 16:00:57.879, foo, 2025-04-22 16:00:57.879, foo}
2025-04-22 16:00:57,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{54, 37, 1535, 2006/12/12 23:59:43, HAN, 2025-04-22 16:00:57.88, foo, 2025-04-22 16:00:57.88, foo}
2025-04-22 16:00:57,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{55, 38, 1700, 2007/05/01 02:03:00, HAN, 2025-04-22 16:00:57.88, foo, 2025-04-22 16:00:57.88, foo}
2025-04-22 16:00:57,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{56, 40, 128, 2007/05/01 12:13:00, BAK, 2025-04-22 16:00:57.88, foo, 2025-04-22 16:00:57.88, foo}
2025-04-22 16:00:57,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{57, 40, 256, 2013/05/01 12:13:00, BAK, 2025-04-22 16:00:57.88, foo, 2025-04-22 16:00:57.88, foo}
2025-04-22 16:00:57,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{58, 40, 512, 2009/05/01 12:13:00, CRC, 2025-04-22 16:00:57.881, foo, 2025-04-22 16:00:57.881, foo}
2025-04-22 16:00:57,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{59, 41, 1700, 2007/11/01 02:13:00, HAN, 2025-04-22 16:00:57.881, foo, 2025-04-22 16:00:57.881, foo}
2025-04-22 16:00:57,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{60, 42, 30000000, 2014/03/22 21:59:40, HAN, 2025-04-22 16:00:57.881, foo, 2025-04-22 16:00:57.881, foo}
2025-04-22 16:00:57,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{61, 43, 1800, 2006/12/28 12:13:10, BAK, 2025-04-22 16:00:57.881, foo, 2025-04-22 16:00:57.881, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{62, 44, 1700, 2006/12/22 23:59:41, BAK, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{63, 45, 1800, 2007/05/21 12:13:00, CRC, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{64, 46, 2000, 2010/12/12 23:59:42, BAK, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{65, 48, 90000, 2006/12/12 23:59:43, HAN, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{66, 48, 10000, 2006/12/12 23:59:43, BAK, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007/05/01 02:03:00, HAN, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{68, 51, 1700, 2007/11/21 02:13:00, BAK, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{69, 52, 100, 2006/12/23 23:59:40, BAK, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,882 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{70, 52, 40, 2007/12/23 23:59:40, HAN, 2025-04-22 16:00:57.882, foo, 2025-04-22 16:00:57.882, foo}
2025-04-22 16:00:57,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{71, 52, 40, 2008/12/23 23:59:40, HAN, 2025-04-22 16:00:57.883, foo, 2025-04-22 16:00:57.883, foo}
2025-04-22 16:00:57,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{72, 52, 40, 2009/12/23 23:59:40, HAN, 2025-04-22 16:00:57.883, foo, 2025-04-22 16:00:57.883, foo}
2025-04-22 16:00:57,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{73, 52, 40, 2010/12/23 23:59:40, BAK, 2025-04-22 16:00:57.883, foo, 2025-04-22 16:00:57.883, foo}
2025-04-22 16:00:57,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{74, 52, 40, 2011/12/23 23:59:40, CRC, 2025-04-22 16:00:57.883, foo, 2025-04-22 16:00:57.883, foo}
2025-04-22 16:00:57,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{75, 52, 40, 2012/12/23 23:59:40, BAK, 2025-04-22 16:00:57.883, foo, 2025-04-22 16:00:57.883, foo}
2025-04-22 16:00:57,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{76, 52, 40, 2013/12/23 23:59:40, HAN, 2025-04-22 16:00:57.883, foo, 2025-04-22 16:00:57.883, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{77, 52, 40, 2014/12/23 23:59:40, HAN, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{78, 52, 40, 2015/12/23 23:59:40, HAN, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{79, 53, 600000, 2007/12/28 12:13:10, BAK, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008/02/22 23:59:41, CRC, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{81, 55, 1600, 2012/07/21 12:13:00, HAN, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{82, 55, 200, 2008/07/21 12:13:00, CRC, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{83, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{84, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,884 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{85, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-04-22 16:00:57.884, foo, 2025-04-22 16:00:57.884, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{86, 56, 2000, 2009/12/22 23:59:42, HAN, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{87, 57, 999, 2014/02/01 02:13:00, HAN, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{88, 58, 4000000, 2006/12/12 23:59:43, HAN, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013/05/01 02:03:00, CRC, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006/12/12 23:59:44, BAK, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{91, 61, 12000000, 2008/03/03 06:34:56, HAN, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{92, 62, 20000, 2009/06/04 06:34:56, HAN, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{93, 63, 2000, 2010/09/26 06:34:56, HAN, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{94, 64, 50, 2011/03/03 09:45:29, BAK, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{95, 65, 1000000, 2012/06/04 09:45:29, BAK, 2025-04-22 16:00:57.885, foo, 2025-04-22 16:00:57.885, foo}
2025-04-22 16:00:57,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{96, 66, 900000, 2013/09/26 09:45:29, BAK, 2025-04-22 16:00:57.886, foo, 2025-04-22 16:00:57.886, foo}
2025-04-22 16:00:57,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{97, 67, 3000, 2014/03/03 21:02:12, CRC, 2025-04-22 16:00:57.886, foo, 2025-04-22 16:00:57.886, foo}
2025-04-22 16:00:57,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{98, 68, 3000, 2015/06/04 21:02:12, CRC, 2025-04-22 16:00:57.886, foo, 2025-04-22 16:00:57.886, foo}
2025-04-22 16:00:57,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{99, 69, 1000, 2016/09/26 21:02:12, CRC, 2025-04-22 16:00:57.886, foo, 2025-04-22 16:00:57.886, foo}
2025-04-22 16:00:57,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{100, 70, 1200, 2017/03/03 01:11:00, HAN, 2025-04-22 16:00:57.886, foo, 2025-04-22 16:00:57.886, foo}
2025-04-22 16:00:57,902 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2025-04-22 16:00:57,903 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():387) - ...Checking implicit set of classification
2025-04-22 16:00:57,909 [main] INFO  (DfDatabaseProperties#createMainSchemaConnection():981) - ...Creating connection to main schema: {maihamadb.$$NoNameSchema$$ as main}
2025-04-22 16:00:57,920 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for MemberStatus classification
select MEMBER_STATUS_CODE as cls_code, MEMBER_STATUS_NAME as cls_name
     , MEMBER_STATUS_NAME as cls_alias, DESCRIPTION as cls_comment
  from MEMBER_STATUS order by DISPLAY_ORDER
2025-04-22 16:00:57,922 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ServiceRank classification
select SERVICE_RANK_CODE as cls_code, SERVICE_RANK_NAME as cls_name
     , SERVICE_RANK_NAME as cls_alias, DESCRIPTION as cls_comment
  from SERVICE_RANK order by DISPLAY_ORDER
2025-04-22 16:00:57,923 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for Region classification
select REGION_ID as cls_code, REGION_NAME as cls_name
     , REGION_NAME as cls_alias, null as cls_comment
  from REGION order by REGION_ID
2025-04-22 16:00:57,923 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for WithdrawalReason classification
select WITHDRAWAL_REASON_CODE as cls_code, WITHDRAWAL_REASON_CODE as cls_name
     , WITHDRAWAL_REASON_CODE as cls_alias, WITHDRAWAL_REASON_TEXT as cls_comment
  from WITHDRAWAL_REASON order by DISPLAY_ORDER
2025-04-22 16:00:57,924 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductCategory classification
select loc.PRODUCT_CATEGORY_CODE as cls_code, loc.PRODUCT_CATEGORY_NAME as cls_name
     , loc.PRODUCT_CATEGORY_NAME as cls_alias, 'of ' || rel.PRODUCT_CATEGORY_NAME as cls_comment
  from PRODUCT_CATEGORY loc left outer join PRODUCT_CATEGORY rel on loc.PARENT_CATEGORY_CODE = rel.PRODUCT_CATEGORY_CODE
 order by loc.PARENT_CATEGORY_CODE is not null, loc.PARENT_CATEGORY_CODE
2025-04-22 16:00:57,925 [main] INFO  (DfClsTableClassificationArranger#selectTableClassification():233) - ...Selecting for ProductStatus classification
select PRODUCT_STATUS_CODE as cls_code, PRODUCT_STATUS_NAME as cls_name
     , PRODUCT_STATUS_NAME as cls_alias, null as cls_comment
  from PRODUCT_STATUS
2025-04-22 16:00:57,929 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2025-04-22 16:00:57,930 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct NEW_ACCEPTABLE_FLG from SERVICE_RANK where NEW_ACCEPTABLE_FLG not in (1, 0)
2025-04-22 16:00:57,930 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct MOBILE_LOGIN_FLG from MEMBER_LOGIN where MOBILE_LOGIN_FLG not in (1, 0)
2025-04-22 16:00:57,930 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct PAYMENT_COMPLETE_FLG from PURCHASE where PAYMENT_COMPLETE_FLG not in (1, 0)
2025-04-22 16:00:57,931 [main] INFO  (DfImplicitClassificationChecker#check():70) - select distinct PAYMENT_METHOD_CODE from PURCHASE_PAYMENT where PAYMENT_METHOD_CODE not in ('HAN', 'BAK', 'CRC')
2025-04-22 16:00:57,932 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-04-22 16:00:57,932 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-04-22 16:00:57,932 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-04-22 16:00:57,932 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-04-22 16:00:57,932 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-04-22 16:00:57,932 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-04-22 16:00:57,934 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-04-22 16:00:57,935 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-04-22 16:00:57,935 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-04-22 16:00:57,935 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-04-22 16:00:57,936 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s321ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.40)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=maihamadb, user=maihamadb}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 3 files) - 00m00s544ms
  (Initialize Schema) - 00m00s210ms
  (Create Schema) - 00m00s332ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql
  o replace-schema.sql

 Load Data: common:{xls=1}, ut:{xls=2} - 00m00s326ms
  <common>
  o 10-master.xls
  <ut>
  o 20-member.xls
  o 30-product.xls

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
